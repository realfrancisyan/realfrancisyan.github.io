[{"title":"MongoDB 基础用法","permalink":"https://sparanoid.com/mongodb-basic-usage.html","link":"https://sparanoid.com/mongodb-basic-usage.html","date":"2019-05-20T00:00:00-07:00","modified":"2019-05-20T02:17:13-07:00","author":{"name":"Jiajun Yan","url":"https://sparanoid.com/","email":"t@sparanoid.com"},"content":"<p>最近在学习 <code class=\"highlighter-rouge\">MongoDB</code>，现将所学总结一下。</p>\n\n<h1 id=\"启动\">启动</h1>\n\n<blockquote>\n\n</blockquote>\n\n<div class=\"language-terminal highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"go\">mongod --directoryperdb --dbpath data/db -logpath log/mongo.log --logappend\n\n// or with authentication\nmongod --directoryperdb --dbpath data/db -logpath log/mongo.log --logappend --auth\n\nmongo\n</span></code></pre></div></div>\n\n<h1 id=\"创建管理员用户\">创建管理员用户</h1>\n\n<blockquote>\n\n</blockquote>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">use</span> <span class=\"nx\">admin</span>\n<span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">createUser</span><span class=\"p\">(</span>\n  <span class=\"p\">{</span>\n    <span class=\"na\">user</span><span class=\"p\">:</span> <span class=\"s2\">\"jiajun\"</span><span class=\"p\">,</span>\n    <span class=\"na\">pwd</span><span class=\"p\">:</span> <span class=\"s2\">\"qweasdzxc123\"</span><span class=\"p\">,</span>\n    <span class=\"na\">roles</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n       <span class=\"s2\">\"root\"</span>\n    <span class=\"p\">]</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">)</span>\n<span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">auth</span><span class=\"p\">(</span><span class=\"s1\">'jiajun'</span><span class=\"p\">,</span> <span class=\"s1\">'qweasdzxc123'</span><span class=\"p\">)</span> <span class=\"c1\">// returning 1 means success</span>\n\n<span class=\"c1\">// 登录</span>\n<span class=\"nx\">mongo</span> <span class=\"nx\">admin</span> <span class=\"o\">-</span><span class=\"nx\">u</span> <span class=\"nx\">jiajun</span> <span class=\"o\">-</span><span class=\"nx\">p</span> <span class=\"nx\">qweasdzxc123</span> \n</code></pre></div></div>\n\n<h1 id=\"创建表查找表\">创建表，查找表</h1>\n\n<blockquote>\n\n</blockquote>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"mi\">1</span><span class=\"p\">.</span> <span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">createCollection</span><span class=\"p\">(</span><span class=\"s2\">\"customers\"</span><span class=\"p\">)</span>\n<span class=\"mi\">2</span><span class=\"p\">.</span> <span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">customers</span><span class=\"p\">.</span><span class=\"nx\">insert</span><span class=\"p\">({</span><span class=\"na\">first_name</span><span class=\"p\">:</span> <span class=\"s2\">\"John\"</span><span class=\"p\">,</span> <span class=\"na\">last_name</span><span class=\"p\">:</span> <span class=\"s2\">\"Doe\"</span><span class=\"p\">})</span>\n<span class=\"mi\">3</span><span class=\"p\">.</span> <span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">customers</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">().</span><span class=\"nx\">pretty</span><span class=\"p\">()</span> <span class=\"c1\">// show all content of a collection</span>\n<span class=\"mi\">4</span><span class=\"p\">.</span> <span class=\"nx\">Show</span> <span class=\"nx\">collections</span>\n<span class=\"mi\">5</span><span class=\"p\">.</span> <span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">createUser</span><span class=\"p\">({</span><span class=\"na\">user</span><span class=\"p\">:</span> <span class=\"s2\">\"brad\"</span><span class=\"p\">,</span> <span class=\"na\">pwd</span><span class=\"p\">:</span> <span class=\"s2\">\"1234\"</span><span class=\"p\">,</span> <span class=\"na\">roles</span><span class=\"p\">:</span> <span class=\"p\">[{</span><span class=\"na\">role</span><span class=\"p\">:</span> <span class=\"s2\">\"readWrite\"</span><span class=\"p\">,</span> <span class=\"na\">db</span><span class=\"p\">:</span> <span class=\"s2\">\"dbAdmin\"</span><span class=\"p\">}]})</span>\n<span class=\"mi\">6</span><span class=\"p\">.</span> <span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">customers</span><span class=\"p\">.</span><span class=\"nx\">update</span><span class=\"p\">({</span><span class=\"na\">first_name</span><span class=\"p\">:</span> <span class=\"s2\">\"John\"</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"na\">first_name</span><span class=\"p\">:</span> <span class=\"s2\">\"John\"</span><span class=\"p\">,</span> <span class=\"na\">last_name</span><span class=\"p\">:</span> <span class=\"s2\">\"Doe\"</span><span class=\"p\">,</span> <span class=\"na\">gender</span><span class=\"p\">:</span> <span class=\"s2\">\"male\"</span><span class=\"p\">});</span> <span class=\"c1\">// update </span>\n<span class=\"mi\">7</span><span class=\"p\">.</span> <span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">customers</span><span class=\"p\">.</span><span class=\"nx\">update</span><span class=\"p\">({</span><span class=\"na\">first_name</span><span class=\"p\">:</span><span class=\"s2\">\"Steven\"</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"na\">$set</span><span class=\"p\">:{</span><span class=\"na\">gender</span><span class=\"p\">:</span> <span class=\"s2\">\"male\"</span><span class=\"p\">}})</span> <span class=\"c1\">// append and replace an element</span>\n<span class=\"mi\">8</span><span class=\"p\">.</span> <span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">customers</span><span class=\"p\">.</span><span class=\"nx\">update</span><span class=\"p\">({</span><span class=\"na\">first_name</span><span class=\"p\">:</span> <span class=\"s2\">\"Steven\"</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"na\">$inc</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"na\">age</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">}})</span> <span class=\"c1\">// increment a certain field of an element</span>\n<span class=\"mi\">9</span><span class=\"p\">.</span> <span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">customers</span><span class=\"p\">.</span><span class=\"nx\">update</span><span class=\"p\">({</span><span class=\"na\">first_name</span><span class=\"p\">:</span> <span class=\"s2\">\"Steven\"</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"na\">$unset</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"na\">age</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">}})</span> <span class=\"c1\">// remove a field of an element</span>\n<span class=\"mi\">10</span><span class=\"p\">.</span> <span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">customers</span><span class=\"p\">.</span><span class=\"nx\">update</span><span class=\"p\">({</span><span class=\"na\">first_name</span><span class=\"p\">:</span> <span class=\"s2\">\"Mary\"</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"na\">first_name</span><span class=\"p\">:</span> <span class=\"s2\">\"Mary\"</span><span class=\"p\">,</span> <span class=\"na\">last_name</span><span class=\"p\">:</span> <span class=\"s2\">\"Samson\"</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"na\">upsert</span><span class=\"p\">:</span><span class=\"kc\">true</span><span class=\"p\">})</span> <span class=\"c1\">// update an element, if it doesnt exist, insert it</span>\n<span class=\"mi\">11</span><span class=\"p\">.</span> <span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">customers</span><span class=\"p\">.</span><span class=\"nx\">update</span><span class=\"p\">({</span><span class=\"na\">first_name</span><span class=\"p\">:</span> <span class=\"s2\">\"Steven\"</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"na\">$rename</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"gener\"</span><span class=\"p\">:</span> <span class=\"s2\">\"sex\"</span><span class=\"p\">}})</span> <span class=\"c1\">// rename a field</span>\n<span class=\"mi\">12</span><span class=\"p\">.</span> <span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">customers</span><span class=\"p\">.</span><span class=\"nx\">remove</span><span class=\"p\">({</span><span class=\"na\">first_name</span><span class=\"p\">:</span> <span class=\"s2\">\"Steven\"</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"na\">justOne</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">})</span> <span class=\"c1\">// remove an element, delete the first element found, not all of them</span>\n</code></pre></div></div>\n\n<h1 id=\"find\">find()</h1>\n\n<blockquote>\n\n</blockquote>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"mi\">1</span><span class=\"p\">.</span> <span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">customers</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">({</span><span class=\"na\">first_name</span><span class=\"p\">:</span> <span class=\"s2\">\"John\"</span><span class=\"p\">}).</span><span class=\"nx\">pretty</span><span class=\"p\">()</span> <span class=\"c1\">// find an element with first_name \"John\"</span>\n<span class=\"mi\">2</span><span class=\"p\">.</span> <span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">customers</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">({</span><span class=\"na\">$or</span><span class=\"p\">:[{</span><span class=\"na\">first_name</span><span class=\"p\">:</span><span class=\"s2\">\"John\"</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"na\">first_name</span><span class=\"p\">:</span> <span class=\"s2\">\"Mary\"</span><span class=\"p\">}]}).</span><span class=\"nx\">pretty</span><span class=\"p\">()</span> <span class=\"c1\">// find multiple elements</span>\n<span class=\"mi\">3</span><span class=\"p\">.</span> <span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">customers</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">({</span><span class=\"na\">age</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"na\">$lte</span><span class=\"p\">:</span> <span class=\"mi\">40</span><span class=\"p\">}})</span> <span class=\"c1\">// find element's age less than and equal to 40</span>\n<span class=\"mi\">4</span><span class=\"p\">.</span> <span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">customers</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">({</span><span class=\"s2\">\"address.city\"</span> <span class=\"p\">:</span> <span class=\"s2\">\"Boston\"</span><span class=\"p\">})</span> <span class=\"c1\">// find matches with a field of a field</span>\n</code></pre></div></div>\n\n<h1 id=\"sorting\">Sorting</h1>\n\n<blockquote>\n\n</blockquote>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"mi\">1</span><span class=\"p\">.</span> <span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">customers</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">().</span><span class=\"nx\">sort</span><span class=\"p\">({</span><span class=\"na\">last_name</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">})</span> <span class=\"c1\">// 1: ascending, -1: descending</span>\n</code></pre></div></div>\n\n<h1 id=\"count\">Count</h1>\n\n<blockquote>\n\n</blockquote>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"mi\">1</span><span class=\"p\">.</span> <span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">customers</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">().</span><span class=\"nx\">count</span><span class=\"p\">()</span>\n<span class=\"mi\">2</span><span class=\"p\">.</span> <span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">customers</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">({</span><span class=\"na\">gender</span><span class=\"p\">:</span> <span class=\"s1\">'male'</span><span class=\"p\">}).</span><span class=\"nx\">count</span><span class=\"p\">()</span>\n</code></pre></div></div>\n\n<h1 id=\"limit\">Limit</h1>\n\n<blockquote>\n\n</blockquote>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"mi\">1</span><span class=\"p\">.</span> <span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">customers</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">({</span><span class=\"na\">gender</span><span class=\"p\">:</span> <span class=\"s1\">'male'</span><span class=\"p\">}).</span><span class=\"nx\">limit</span><span class=\"p\">()</span> <span class=\"c1\">// first four elements</span>\n</code></pre></div></div>\n\n<h1 id=\"pymongo-连接\">pymongo 连接</h1>\n\n<blockquote>\n\n</blockquote>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">create_app</span><span class=\"p\">():</span>\n    <span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Flask</span><span class=\"p\">(</span><span class=\"n\">__name__</span><span class=\"p\">)</span>\n    <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s\">'MONGO_DBNAME'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s\">'docs'</span>\n    <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s\">'MONGO_URI'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s\">'mongodb://jiajun:qweasdzxc123@localhost:27017/docs?authSource=admin'</span>\n    <span class=\"n\">mongo</span> <span class=\"o\">=</span> <span class=\"n\">PyMongo</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">app</span>\n</code></pre></div></div>","excerpt":"最近在学习 MongoDB，现将所学总结一下。","languages":null,"categories":["note"],"tags":["mongodb"]},{"title":"Ubuntu 下安装 MongoDB 并远程连接","permalink":"https://sparanoid.com/install-mongodb-on-ubuntu.html","link":"https://sparanoid.com/install-mongodb-on-ubuntu.html","date":"2019-05-20T00:00:00-07:00","modified":"2019-06-09T19:11:31-07:00","author":{"name":"Jiajun Yan","url":"https://sparanoid.com/","email":"t@sparanoid.com"},"content":"<p>最近在学习 <code class=\"highlighter-rouge\">MongoDB</code>，发现于服务器上安装后默认是无法远程连接的，经过一番研究，总结如下：</p>\n\n<h1 id=\"1-安装\">1. 安装</h1>\n\n<blockquote>\n\n</blockquote>\n\n<p>安装比较简单，按此<a href=\"https://docs.mongodb.com/manual/tutorial/install-mongodb-on-ubuntu/\">官方教程</a>下载安装即可</p>\n\n<div class=\"language-terminal highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"go\">sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 9DA31620334BD75D9DCB49F368818C72E52529D4\necho \"deb [ arch=amd64 ] https://repo.mongodb.org/apt/ubuntu bionic/mongodb-org/4.0 multiverse\" | sudo tee /etc/apt/sources.list.d/mongodb-org-4.0.list\nsudo apt-get update\nsudo apt-get install -y mongodb-org\n</span></code></pre></div></div>\n\n<h1 id=\"2-启动远程连接\">2. 启动远程连接</h1>\n\n<blockquote>\n\n</blockquote>\n\n<p><code class=\"highlighter-rouge\">MongoDB</code> 默认是无法远程连接的，需要编辑 <code class=\"highlighter-rouge\">/etc/mongod.conf</code> 中的 <code class=\"highlighter-rouge\">127.0.0.1</code> 改为 <code class=\"highlighter-rouge\">0.0.0.0</code> 启用。</p>\n\n<h1 id=\"3-启用登录验证\">3. 启用登录验证</h1>\n\n<blockquote>\n\n</blockquote>\n\n<p>编辑 <code class=\"highlighter-rouge\">/etc/mongod.conf</code>，并加上一下一行：</p>\n\n<div class=\"language-terminal highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"go\">vi /etc/mongod.conf\n</span></code></pre></div></div>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>security:\n  authorization: \"enabled\"\n</code></pre></div></div>\n\n<h1 id=\"4-防止报错\">4. 防止报错</h1>\n\n<blockquote>\n\n</blockquote>\n\n<p>修改以上文件后，立即输入命令启动，并不会启用服务。需要设定权限：</p>\n\n<div class=\"language-terminal highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"gp\">#</span> storage.dbPath\n<span class=\"go\">chown -R mongodb:mongodb /var/lib/mongodb\n\n</span><span class=\"gp\">#</span> systemLog.path\n<span class=\"go\">sudo chown -R mongodb:mongodb /var/log/mongodb\n</span></code></pre></div></div>\n\n<h1 id=\"5-启用服务\">5. 启用服务</h1>\n\n<blockquote>\n\n</blockquote>\n\n<div class=\"language-terminal highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"go\">service mongod start\n</span></code></pre></div></div>\n\n<p>弄完以上，如果没有教程，真叫人累。不知道为什么 2019 年了这些软件还要这么麻烦耗开发者大量的时间去安装。</p>","excerpt":"最近在学习 MongoDB，发现于服务器上安装后默认是无法远程连接的，经过一番研究，总结如下：","languages":null,"categories":["note"],"tags":["mongodb"]},{"title":"2019 学习计划","permalink":"https://sparanoid.com/plans.html","link":"https://sparanoid.com/plans.html","date":"2019-05-08T00:00:00-07:00","modified":"2019-05-20T02:17:13-07:00","author":{"name":"Jiajun Yan","url":"https://sparanoid.com/","email":"t@sparanoid.com"},"content":"<p>学无止境。自从转行进入了前端成了一名正式的程序员后，发现前端需要学的东西实在太多，而且很难跟上变化，东西很多很好，但并不是要将每样东西都学习一遍，而是要将最核心、最流行的框架和语言学好，这才是最重要的。</p>\n\n<p>前端技术日新月异，框架实在太多太杂，技术掌握到一定程度后，前端工程师也要往全栈方向发展。截止目前，前端技术包括但不限于：</p>\n\n<h1 id=\"html-5-网页类\">HTML 5 网页类</h1>\n\n<blockquote>\n\n</blockquote>\n\n<ol>\n  <li>React</li>\n  <li>Vue</li>\n  <li>Angular</li>\n  <li>jQuery</li>\n</ol>\n\n<h1 id=\"css-框架\">CSS 框架</h1>\n\n<blockquote>\n\n</blockquote>\n\n<ol>\n  <li>Bootstrap</li>\n  <li>Ant Design</li>\n  <li>Element</li>\n</ol>\n\n<h1 id=\"移动-app\">移动 APP</h1>\n\n<blockquote>\n\n</blockquote>\n\n<ol>\n  <li>小程序</li>\n  <li>React Native</li>\n  <li>Flutter</li>\n</ol>\n\n<h1 id=\"全栈方向\">全栈方向</h1>\n\n<blockquote>\n\n</blockquote>\n\n<ol>\n  <li>Node.js</li>\n  <li>Python</li>\n  <li>SQL</li>\n</ol>\n\n<h1 id=\"其他相关\">其他相关</h1>\n\n<blockquote>\n\n</blockquote>\n\n<ol>\n  <li>TypeScript</li>\n  <li>ES6</li>\n  <li>交互设计</li>\n  <li>产品设计</li>\n</ol>\n\n<p>这几类涵盖了大部分目前流行的前端技术，但实际上还有很多没有罗列。</p>\n\n<p>就 2018 年来说，回头一望，发现自己学习的技术不多不少，具体如下：</p>\n\n<ol>\n  <li>Vue</li>\n  <li>React</li>\n  <li>微信小程序</li>\n  <li>Git</li>\n  <li>Python 爬虫</li>\n  <li>Spring MVC</li>\n  <li>React Native</li>\n  <li>SQL</li>\n</ol>\n\n<p>2019，不经不觉已过了差不多半年时间，展望未来下半年学习如下技术：</p>\n\n<ol>\n  <li>Python Flask</li>\n  <li>巩固 Python 爬虫技术</li>\n  <li>Flutter</li>\n  <li>Angular 7</li>\n</ol>\n\n<p>学习不是一件难事，如何不断实践和巩固才是难。希望自己有能力、有持之以行的心去应对挑战。</p>","excerpt":"学无止境。自从转行进入了前端成了一名正式的程序员后，发现前端需要学的东西实在太多，而且很难跟上变化，东西很多很好，但并不是要将每样东西都学习一遍，而是要将最核心、最流行的框架和语言学好，这才是最重要的。","languages":null,"categories":["note"],"tags":["js"]},{"title":"NodeJS 学习总结","permalink":"https://sparanoid.com/node-js-sum-up.html","link":"https://sparanoid.com/node-js-sum-up.html","date":"2019-05-07T00:00:00-07:00","modified":"2019-05-07T02:32:58-07:00","author":{"name":"Jiajun Yan","url":"https://sparanoid.com/","email":"t@sparanoid.com"},"content":"<p>最近花了两天时间粗略学习了 <code class=\"highlighter-rouge\">Node JS</code>，以下我将为我个人认为在目前项目中较为重要的部分罗列，本总结会不断更新。</p>\n\n<h1 id=\"1-读写删除文件\">1. 读写、删除文件</h1>\n\n<blockquote>\n\n</blockquote>\n\n<p>可通过引入 <code class=\"highlighter-rouge\">fs</code> 库中的 <code class=\"highlighter-rouge\">readFile</code>，<code class=\"highlighter-rouge\">writeFile</code>，<code class=\"highlighter-rouge\">unlinkSync</code> 进行各项操作。</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">fs</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'fs'</span><span class=\"p\">)</span>\n<span class=\"nx\">fs</span><span class=\"p\">.</span><span class=\"nx\">readFile</span><span class=\"p\">(</span><span class=\"s1\">'readMe.txt'</span><span class=\"p\">,</span> <span class=\"s1\">'utf-8'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">,</span> <span class=\"nx\">data</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\t<span class=\"nx\">fs</span><span class=\"p\">.</span><span class=\"nx\">writeFile</span><span class=\"p\">(</span><span class=\"s1\">'writeMe.txt'</span><span class=\"p\">,</span> <span class=\"nx\">data</span><span class=\"p\">)</span>\n<span class=\"p\">})</span>\n\n<span class=\"nx\">fs</span><span class=\"p\">.</span><span class=\"nx\">unlinkSync</span><span class=\"p\">(</span><span class=\"s1\">'readMe.txt'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>其中：\n<code class=\"highlighter-rouge\">fs.readFile()</code> 可传入 2 - 3 个参数</p>\n<ol>\n  <li>文件路径</li>\n  <li>编码</li>\n  <li>错误返回以及数据返回</li>\n</ol>\n\n<p><code class=\"highlighter-rouge\">fs.writeFile()</code> 可传入 2 个参数:</p>\n<ol>\n  <li>文件路径</li>\n  <li>数据返回</li>\n</ol>\n\n<p><code class=\"highlighter-rouge\">fs.unlinkSync()</code> 可传入 1 个参数:</p>\n<ol>\n  <li>文件路径</li>\n</ol>\n\n<h1 id=\"2-创建和删除文件夹\">2. 创建和删除文件夹</h1>\n\n<blockquote>\n\n</blockquote>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">fs</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'fs'</span><span class=\"p\">)</span>\n<span class=\"nx\">fs</span><span class=\"p\">.</span><span class=\"nx\">mkdir</span><span class=\"p\">(</span><span class=\"s1\">'dir'</span><span class=\"p\">)</span> <span class=\"c1\">// 创建文件夹</span>\n<span class=\"nx\">fs</span><span class=\"p\">.</span><span class=\"nx\">rmdir</span><span class=\"p\">(</span><span class=\"s1\">'dir'</span><span class=\"p\">)</span> <span class=\"c1\">// 删除文件夹</span>\n</code></pre></div></div>\n\n<h1 id=\"3-创建服务器\">3. 创建服务器</h1>\n\n<blockquote>\n\n</blockquote>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">http</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'http'</span><span class=\"p\">)</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">server</span> <span class=\"o\">=</span> <span class=\"nx\">http</span><span class=\"p\">.</span><span class=\"nx\">createServer</span><span class=\"p\">((</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">`request was made </span><span class=\"p\">${</span><span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">}</span><span class=\"s2\">`</span><span class=\"p\">)</span>\n <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">writeHead</span><span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'content-Type'</span><span class=\"p\">:</span> <span class=\"s1\">'text/plain'</span><span class=\"p\">})</span>\n <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">end</span><span class=\"p\">(</span><span class=\"s1\">'Hey ninjas'</span><span class=\"p\">)</span>\n<span class=\"p\">})</span>\n\n<span class=\"nx\">server</span><span class=\"p\">.</span><span class=\"nx\">listen</span><span class=\"p\">(</span><span class=\"mi\">3000</span><span class=\"p\">,</span> <span class=\"s1\">'127.0.0.1'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<h1 id=\"4-输出-html\">4. 输出 HTML</h1>\n\n<blockquote>\n\n</blockquote>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">http</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'http'</span><span class=\"p\">)</span>\n<span class=\"kd\">const</span> <span class=\"nx\">fs</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'fs'</span><span class=\"p\">)</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">server</span> <span class=\"o\">=</span> <span class=\"nx\">http</span><span class=\"p\">.</span><span class=\"nx\">createServer</span><span class=\"p\">((</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">`request was made </span><span class=\"p\">${</span><span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">}</span><span class=\"s2\">`</span><span class=\"p\">)</span>\n <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">writeHead</span><span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'content-Type'</span><span class=\"p\">:</span> <span class=\"s1\">'text/html'</span><span class=\"p\">})</span>\n <span class=\"c1\">// readable stream</span>\n <span class=\"kd\">const</span> <span class=\"nx\">myReadStream</span> <span class=\"o\">=</span> <span class=\"nx\">fs</span><span class=\"p\">.</span><span class=\"nx\">createReadStream</span><span class=\"p\">(</span><span class=\"nx\">__dirname</span> <span class=\"o\">+</span> <span class=\"s1\">'/index.html'</span><span class=\"p\">,</span> <span class=\"s1\">'utf-8'</span><span class=\"p\">)</span>\n <span class=\"nx\">myReadStream</span><span class=\"p\">.</span><span class=\"nx\">pipe</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">)</span>\n<span class=\"p\">})</span>\n\n<span class=\"nx\">server</span><span class=\"p\">.</span><span class=\"nx\">listen</span><span class=\"p\">(</span><span class=\"mi\">3000</span><span class=\"p\">,</span> <span class=\"s1\">'127.0.0.1'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<h1 id=\"5-输出-json\">5. 输出 JSON</h1>\n\n<blockquote>\n\n</blockquote>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">http</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'http'</span><span class=\"p\">)</span>\n<span class=\"kd\">const</span> <span class=\"nx\">fs</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'fs'</span><span class=\"p\">)</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">server</span> <span class=\"o\">=</span> <span class=\"nx\">http</span><span class=\"p\">.</span><span class=\"nx\">createServer</span><span class=\"p\">((</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">`request was made </span><span class=\"p\">${</span><span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">}</span><span class=\"s2\">`</span><span class=\"p\">)</span>\n <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">writeHead</span><span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"s1\">'content-Type'</span><span class=\"p\">:</span> <span class=\"s1\">'application/json'</span> <span class=\"p\">})</span>\n <span class=\"kd\">const</span> <span class=\"nx\">myObj</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s1\">'Jiajun'</span><span class=\"p\">,</span>\n  <span class=\"na\">job</span><span class=\"p\">:</span> <span class=\"s1\">'web dev'</span><span class=\"p\">,</span>\n  <span class=\"na\">age</span><span class=\"p\">:</span> <span class=\"mi\">27</span>\n <span class=\"p\">}</span>\n\n <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">end</span><span class=\"p\">(</span><span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">stringify</span><span class=\"p\">(</span><span class=\"nx\">myObj</span><span class=\"p\">))</span>\n<span class=\"p\">})</span>\n\n<span class=\"nx\">server</span><span class=\"p\">.</span><span class=\"nx\">listen</span><span class=\"p\">(</span><span class=\"mi\">3000</span><span class=\"p\">,</span> <span class=\"s1\">'127.0.0.1'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<h1 id=\"6-路由\">6. 路由</h1>\n\n<blockquote>\n\n</blockquote>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">http</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'http'</span><span class=\"p\">)</span>\n<span class=\"kd\">const</span> <span class=\"nx\">fs</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'fs'</span><span class=\"p\">)</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">server</span> <span class=\"o\">=</span> <span class=\"nx\">http</span><span class=\"p\">.</span><span class=\"nx\">createServer</span><span class=\"p\">((</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">`request was made </span><span class=\"p\">${</span><span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">}</span><span class=\"s2\">`</span><span class=\"p\">)</span>\n <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">url</span> <span class=\"o\">===</span> <span class=\"s1\">'/home'</span> <span class=\"o\">||</span> <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">url</span> <span class=\"o\">===</span> <span class=\"s1\">'/'</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">writeHead</span><span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"s1\">'content-Type'</span><span class=\"p\">:</span> <span class=\"s1\">'text/html'</span> <span class=\"p\">})</span>\n  <span class=\"nx\">fs</span><span class=\"p\">.</span><span class=\"nx\">createReadStream</span><span class=\"p\">(</span><span class=\"s2\">`</span><span class=\"p\">${</span><span class=\"nx\">__dirname</span><span class=\"p\">}</span><span class=\"s2\">/index.html`</span><span class=\"p\">).</span><span class=\"nx\">pipe</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">)</span>\n <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">url</span> <span class=\"o\">===</span> <span class=\"s1\">'/contact'</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">fs</span><span class=\"p\">.</span><span class=\"nx\">createReadStream</span><span class=\"p\">(</span><span class=\"s2\">`</span><span class=\"p\">${</span><span class=\"nx\">__dirname</span><span class=\"p\">}</span><span class=\"s2\">/contact.html`</span><span class=\"p\">).</span><span class=\"nx\">pipe</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">)</span>\n <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">url</span> <span class=\"o\">===</span> <span class=\"s1\">'/api/ninjas'</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">ninjas</span> <span class=\"o\">=</span> <span class=\"p\">[{</span> <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s1\">'ryu'</span><span class=\"p\">,</span> <span class=\"na\">age</span><span class=\"p\">:</span> <span class=\"mi\">29</span> <span class=\"p\">},</span> <span class=\"p\">{</span> <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s1\">'Jiajun'</span><span class=\"p\">,</span> <span class=\"na\">age</span><span class=\"p\">:</span> <span class=\"mi\">27</span> <span class=\"p\">}]</span>\n  <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">writeHead</span><span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"s1\">'content-Type'</span><span class=\"p\">:</span> <span class=\"s1\">'application/json'</span> <span class=\"p\">})</span>\n  <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">end</span><span class=\"p\">(</span><span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">stringify</span><span class=\"p\">(</span><span class=\"nx\">ninjas</span><span class=\"p\">))</span>\n <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n  <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">writeHead</span><span class=\"p\">(</span><span class=\"mi\">404</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"s1\">'content-Type'</span><span class=\"p\">:</span> <span class=\"s1\">'text/html'</span> <span class=\"p\">})</span>\n  <span class=\"nx\">fs</span><span class=\"p\">.</span><span class=\"nx\">createReadStream</span><span class=\"p\">(</span><span class=\"s2\">`</span><span class=\"p\">${</span><span class=\"nx\">__dirname</span><span class=\"p\">}</span><span class=\"s2\">/404.html`</span><span class=\"p\">).</span><span class=\"nx\">pipe</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">)</span>\n <span class=\"p\">}</span>\n<span class=\"p\">})</span>\n\n<span class=\"nx\">server</span><span class=\"p\">.</span><span class=\"nx\">listen</span><span class=\"p\">(</span><span class=\"mi\">3000</span><span class=\"p\">,</span> <span class=\"s1\">'127.0.0.1'</span><span class=\"p\">)</span>\n\n</code></pre></div></div>","excerpt":"最近花了两天时间粗略学习了 Node JS，以下我将为我个人认为在目前项目中较为重要的部分罗列，本总结会不断更新。","languages":null,"categories":["note"],"tags":["nodejs"]},{"title":"Express 学习总结","permalink":"https://sparanoid.com/express-sum-up.html","link":"https://sparanoid.com/express-sum-up.html","date":"2019-05-07T00:00:00-07:00","modified":"2019-05-07T02:32:58-07:00","author":{"name":"Jiajun Yan","url":"https://sparanoid.com/","email":"t@sparanoid.com"},"content":"<p>以下我将为我个人认为在目前项目中较为重要的部分罗列，本总结会不断更新。</p>\n\n<p>此篇为 <code class=\"highlighter-rouge\">Node JS 学习总结</code> 的延续。</p>\n\n<h1 id=\"1-设置\">1. 设置</h1>\n\n<blockquote>\n\n</blockquote>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">express</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'express'</span><span class=\"p\">)</span>\n<span class=\"kd\">const</span> <span class=\"nx\">app</span> <span class=\"o\">=</span> <span class=\"nx\">express</span><span class=\"p\">()</span>\n\n<span class=\"c1\">// listens to port 3000</span>\n<span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">listen</span><span class=\"p\">(</span><span class=\"mi\">3000</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<h1 id=\"2-get-方法\">2. GET 方法</h1>\n\n<blockquote>\n\n</blockquote>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">express</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'express'</span><span class=\"p\">)</span>\n<span class=\"kd\">const</span> <span class=\"nx\">app</span> <span class=\"o\">=</span> <span class=\"nx\">express</span><span class=\"p\">()</span>\n\n<span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"s1\">'/'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">send</span><span class=\"p\">(</span><span class=\"s1\">'this is the home page'</span><span class=\"p\">)</span>\n<span class=\"p\">})</span>\n\n<span class=\"c1\">// route parameters</span>\n<span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"s1\">'/profile/:id'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">send</span><span class=\"p\">(</span><span class=\"s2\">`You requested to see a profile with the id of </span><span class=\"p\">${</span><span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">params</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">}</span><span class=\"s2\">`</span><span class=\"p\">)</span>\n<span class=\"p\">})</span>\n\n<span class=\"c1\">// listens to port 3000</span>\n<span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">listen</span><span class=\"p\">(</span><span class=\"mi\">3000</span><span class=\"p\">)</span>\n\n</code></pre></div></div>\n\n<h1 id=\"3-获取路径参数\">3. 获取路径参数</h1>\n\n<blockquote>\n\n</blockquote>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">express</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'express'</span><span class=\"p\">)</span>\n<span class=\"kd\">const</span> <span class=\"nx\">app</span> <span class=\"o\">=</span> <span class=\"nx\">express</span><span class=\"p\">()</span>\n\n<span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"s1\">'/contact'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">query</span><span class=\"p\">.</span><span class=\"nx\">name</span><span class=\"p\">)</span>\n <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">send</span><span class=\"p\">(</span><span class=\"s2\">`</span><span class=\"p\">${</span><span class=\"nx\">__dirname</span><span class=\"p\">}</span><span class=\"s2\">/contact.html`</span><span class=\"p\">)</span>\n<span class=\"p\">})</span>\n\n<span class=\"c1\">// listens to port 3000</span>\n<span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">listen</span><span class=\"p\">(</span><span class=\"mi\">3000</span><span class=\"p\">)</span>\n\n</code></pre></div></div>\n\n<h1 id=\"4-post-方法\">4. POST 方法</h1>\n\n<blockquote>\n\n</blockquote>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">express</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'express'</span><span class=\"p\">)</span>\n<span class=\"kd\">const</span> <span class=\"nx\">app</span> <span class=\"o\">=</span> <span class=\"nx\">express</span><span class=\"p\">()</span>\n<span class=\"kd\">const</span> <span class=\"nx\">bodyParser</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'body-parser'</span><span class=\"p\">)</span>\n<span class=\"kd\">const</span> <span class=\"nx\">urlencodedParser</span> <span class=\"o\">=</span> <span class=\"nx\">bodyParser</span><span class=\"p\">.</span><span class=\"nx\">urlencoded</span><span class=\"p\">({</span> <span class=\"na\">extended</span><span class=\"p\">:</span> <span class=\"kc\">false</span> <span class=\"p\">})</span>\n \n<span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"kd\">set</span><span class=\"p\">(</span><span class=\"s1\">'view engine'</span><span class=\"p\">,</span> <span class=\"s1\">'ejs'</span><span class=\"p\">)</span>\n\n<span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">post</span><span class=\"p\">(</span><span class=\"s1\">'/contact'</span><span class=\"p\">,</span> <span class=\"nx\">urlencodedParser</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">body</span><span class=\"p\">)</span> <span class=\"c1\">// log body property</span>\n <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">send</span><span class=\"p\">({</span><span class=\"na\">data</span><span class=\"p\">:</span> <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">body</span><span class=\"p\">})</span> <span class=\"c1\">// send response</span>\n<span class=\"p\">})</span>\n\n<span class=\"c1\">// listens to port 3000</span>\n<span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">listen</span><span class=\"p\">(</span><span class=\"mi\">3000</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<h1 id=\"5-发送-json\">5. 发送 JSON</h1>\n\n<blockquote>\n\n</blockquote>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">bodyParser</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'body-parser'</span><span class=\"p\">)</span>\n<span class=\"kd\">var</span> <span class=\"nx\">urlencodedParser</span> <span class=\"o\">=</span> <span class=\"nx\">bodyParser</span><span class=\"p\">.</span><span class=\"nx\">urlencoded</span><span class=\"p\">({</span> <span class=\"na\">extended</span><span class=\"p\">:</span> <span class=\"kc\">false</span> <span class=\"p\">})</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">data</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n <span class=\"p\">{</span> <span class=\"na\">item</span><span class=\"p\">:</span> <span class=\"s1\">'get milk'</span> <span class=\"p\">},</span>\n <span class=\"p\">{</span> <span class=\"na\">item</span><span class=\"p\">:</span> <span class=\"s1\">'walk dog'</span> <span class=\"p\">},</span>\n <span class=\"p\">{</span> <span class=\"na\">item</span><span class=\"p\">:</span> <span class=\"s1\">'kick some coding ass'</span> <span class=\"p\">},</span>\n<span class=\"p\">]</span>\n\n<span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"nx\">app</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n <span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">post</span><span class=\"p\">(</span><span class=\"s1\">'/todo'</span><span class=\"p\">,</span> <span class=\"nx\">urlencodedParser</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">body</span><span class=\"p\">)</span>\n  <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">json</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">)</span>\n <span class=\"p\">})</span>\n<span class=\"p\">}</span>\n\n</code></pre></div></div>","excerpt":"以下我将为我个人认为在目前项目中较为重要的部分罗列，本总结会不断更新。","languages":null,"categories":["note"],"tags":["nodejs"]},{"title":"添加 slot 后出现 offsetLeft 错误解决","permalink":"https://sparanoid.com/slot-offset-left-error.html","link":"https://sparanoid.com/slot-offset-left-error.html","date":"2019-04-04T00:00:00-07:00","modified":"2019-05-07T02:32:58-07:00","author":{"name":"Jiajun Yan","url":"https://sparanoid.com/","email":"t@sparanoid.com"},"content":"<p>小程序有很多很隐蔽的 bug，例如：</p>\n\n<p>当在组件中添加 <code class=\"highlighter-rouge\">slot</code> 后，会无缘故出现 offsetLeft 的问题。</p>\n\n<p>代码如下：</p>\n\n<p><img src=\"http://ww1.sinaimg.cn/large/007epDtPgy1g1qpkloijvj316u07475u.jpg\" alt=\"\" /></p>\n\n<p>错误如下：</p>\n\n<p><img src=\"http://ww1.sinaimg.cn/large/007epDtPgy1g1qpkufhrij31hu0p4qeo.jpg\" alt=\"\" /></p>\n\n<p>解决办法，就是在最外层加一个 <code class=\"highlighter-rouge\">view</code> 标签即可。</p>\n\n<p><img src=\"http://ww1.sinaimg.cn/large/007epDtPgy1g1qpl24dyfj316409omz0.jpg\" alt=\"\" /></p>","excerpt":"小程序有很多很隐蔽的 bug，例如：","languages":null,"categories":["note"],"tags":["mp"]},{"title":"解决 VSCode CPU 占用率过高的问题","permalink":"https://sparanoid.com/vscode-high-cpu-usage.html","link":"https://sparanoid.com/vscode-high-cpu-usage.html","date":"2019-03-08T00:00:00-08:00","modified":"2019-03-08T01:20:46-08:00","author":{"name":"Jiajun Yan","url":"https://sparanoid.com/","email":"t@sparanoid.com"},"content":"<p><code class=\"highlighter-rouge\">VSCode</code> 容易导致 CPU 占用率过高，令电脑温度升高，因而系统性能降低，一些插件无法使用。</p>\n\n<p>可通过设置 <code class=\"highlighter-rouge\">Follow Symlink</code> 为 <code class=\"highlighter-rouge\">false</code> 解决问题。</p>\n\n<p>在 <code class=\"highlighter-rouge\">Preferences</code> -&gt; <code class=\"highlighter-rouge\">Settings</code> 中搜索 <code class=\"highlighter-rouge\">symlink</code>，去除默认选择的勾即可。</p>\n\n<p><img src=\"http://ww1.sinaimg.cn/large/007epDtPgy1g0vi9dcu6aj31ck0a2myc.jpg\" alt=\"\" /></p>","excerpt":"VSCode 容易导致 CPU 占用率过高，令电脑温度升高，因而系统性能降低，一些插件无法使用。","languages":null,"categories":["note"],"tags":["miscellaneous"]},{"title":"删除远程错误上传 commit","permalink":"https://sparanoid.com/reset-commit.html","link":"https://sparanoid.com/reset-commit.html","date":"2019-03-05T00:00:00-08:00","modified":"2019-03-05T02:15:27-08:00","author":{"name":"Jiajun Yan","url":"https://sparanoid.com/","email":"t@sparanoid.com"},"content":"<blockquote>\n  <p>在工作中，很难避免错误上传 commit，造成不必要的麻烦。</p>\n</blockquote>\n\n<ol>\n  <li>要删除错误上传的 <code class=\"highlighter-rouge\">commit</code>，先重置到上次 <code class=\"highlighter-rouge\">commit</code>。</li>\n</ol>\n\n<p>右键并选择 <code class=\"highlighter-rouge\">reset branch-name to this commit</code>。</p>\n\n<p><img src=\"http://ww1.sinaimg.cn/large/007epDtPgy1g0s2u0uewmj30r80pwkam.jpg\" alt=\"\" /></p>\n\n<ol>\n  <li>选择 <code class=\"highlighter-rouge\">Mixed</code></li>\n</ol>\n\n<p><img src=\"http://ww1.sinaimg.cn/large/007epDtPgy1g0s2vullk5j30rs0d2gwh.jpg\" alt=\"\" /></p>\n\n<ol>\n  <li>完成后，会发现旧 <code class=\"highlighter-rouge\">commit</code> 依旧存在，需要通过命令行强制删除</li>\n</ol>\n\n<p>点击右上角的 <code class=\"highlighter-rouge\">terminal</code>，并输入：</p>\n\n<div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>git push <span class=\"nt\">-f</span>\n</code></pre></div></div>\n\n<p><img src=\"http://ww1.sinaimg.cn/large/007epDtPgy1g0s31w7zxuj31wg164gwx.jpg\" alt=\"\" /></p>\n\n<p><img src=\"http://ww1.sinaimg.cn/large/007epDtPgy1g0s3254mgoj312q0qiaii.jpg\" alt=\"\" /></p>","excerpt":"在工作中，很难避免错误上传 commit，造成不必要的麻烦。","languages":null,"categories":["note"],"tags":["git"]},{"title":"利用 Charles 建立假文件","permalink":"https://sparanoid.com/charles-fake-data.html","link":"https://sparanoid.com/charles-fake-data.html","date":"2019-03-05T00:00:00-08:00","modified":"2019-03-05T02:35:31-08:00","author":{"name":"Jiajun Yan","url":"https://sparanoid.com/","email":"t@sparanoid.com"},"content":"<p>在开发中，需要改变线上配置文件。但因为该文件十分重要，需要保证代码通过后，才可替换。</p>\n\n<p>此时可利用 <code class=\"highlighter-rouge\">Charles</code> 来建立假文件。</p>\n\n<p>本文假设需要测试的线上文件地址为 <code class=\"highlighter-rouge\">https://www.baidu.com/example.json</code>。</p>\n\n<ol>\n  <li>在 <code class=\"highlighter-rouge\">Charles</code> 选择 <code class=\"highlighter-rouge\">Tools - Map Local</code></li>\n</ol>\n\n<p><img src=\"http://ww1.sinaimg.cn/large/007epDtPgy1g0s3g2hew6j312w0qu1ee.jpg\" alt=\"\" /></p>\n\n<ol>\n  <li>点击 <code class=\"highlighter-rouge\">Add</code>，按需填入需要替换的地址，并选择替换文件</li>\n</ol>\n\n<p>这里需要注意的是，如果没有特别指定端口的话，不用填 <code class=\"highlighter-rouge\">80</code>。</p>\n\n<p><img src=\"http://ww1.sinaimg.cn/large/007epDtPgy1g0s3hd6emtj30wg0toqb3.jpg\" alt=\"\" /></p>\n\n<p>确保勾选 <code class=\"highlighter-rouge\">Enable Map Local</code>，至此，所有设置已完成，刷新页面即可。</p>\n\n<p><img src=\"http://ww1.sinaimg.cn/large/007epDtPgy1g0s3kx9mifj31080own3y.jpg\" alt=\"\" /></p>","excerpt":"在开发中，需要改变线上配置文件。但因为该文件十分重要，需要保证代码通过后，才可替换。","languages":null,"categories":["note"],"tags":["work"]},{"title":"小程序学习踩坑汇总","permalink":"https://sparanoid.com/wechat-mini-program-bugs.html","link":"https://sparanoid.com/wechat-mini-program-bugs.html","date":"2019-02-26T00:00:00-08:00","modified":"2019-02-26T07:01:35-08:00","author":{"name":"Jiajun Yan","url":"https://sparanoid.com/","email":"t@sparanoid.com"},"content":"<p>小程序好处繁多，但坑也不少，现一边学习一边汇总云开发所遇到的 bugs。</p>\n\n<ol>\n  <li><code class=\"highlighter-rouge\">wx:for</code> 循环必须加花括号，否则会额外重复循环，且没提示</li>\n</ol>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"o\">&lt;</span><span class=\"nx\">view</span> <span class=\"kd\">class</span><span class=\"o\">=</span><span class=\"s2\">\"text-small text-secondary__color flex-box flex-column\"</span><span class=\"o\">&gt;</span>\n    <span class=\"o\">&lt;</span><span class=\"nx\">text</span> <span class=\"nx\">wx</span><span class=\"p\">:</span><span class=\"k\">for</span><span class=\"o\">=</span><span class=\"s2\">\"reason\"</span> <span class=\"nx\">wx</span><span class=\"p\">:</span><span class=\"nx\">key</span><span class=\"o\">=</span><span class=\"s2\">\"\"</span><span class=\"o\">&gt;&lt;</span><span class=\"sr\">/text</span><span class=\"err\">&gt;\n</span><span class=\"o\">&lt;</span><span class=\"sr\">/view</span><span class=\"err\">&gt;\n</span></code></pre></div></div>\n\n<p>上述代码中的 <code class=\"highlighter-rouge\">wx:for=\"reason\"</code> 没有添加双花括号，导致额外的循环。这比较难发现，因为如果页面渲染后，显示正确。但如果添加了伪类如 <code class=\"highlighter-rouge\">:before</code> 或者 <code class=\"highlighter-rouge\">&lt;text&gt;&lt;/text&gt;</code> 中间再添加一个 <code class=\"highlighter-rouge\">tag</code>，就会发现这情况。</p>\n\n<ol>\n  <li><code class=\"highlighter-rouge\">scroll-view</code> 坑很多</li>\n</ol>\n\n<p>工作中会用 <code class=\"highlighter-rouge\">scroll-view</code> 中的 <code class=\"highlighter-rouge\">scroll-into-view</code> 的锚点功能定位某个指定位置，但如果将其包装到一个组件中，会出现嵌套。如果要使用锚点，不能包装成组件。</p>\n\n<p>同时使用锚点和绝对定位，在锚点定位到某位置时会出现屏幕抖动的情况。</p>","excerpt":"小程序好处繁多，但坑也不少，现一边学习一边汇总云开发所遇到的 bugs。","languages":null,"categories":["note"],"tags":["mp"]},{"title":"从现有分支建立新分支","permalink":"https://sparanoid.com/git-new-branch-from-branch.html","link":"https://sparanoid.com/git-new-branch-from-branch.html","date":"2019-02-26T00:00:00-08:00","modified":"2019-02-26T07:01:35-08:00","author":{"name":"Jiajun Yan","url":"https://sparanoid.com/","email":"t@sparanoid.com"},"content":"<p>在工作中，公司要求每开始一个功能或者修复 bugs 时必须从 dev 中新建一个分支，再工作。\n现记录一下，防止忘记。</p>\n\n<ol>\n  <li>新建一个分支</li>\n</ol>\n\n<p><img src=\"http://ww1.sinaimg.cn/large/007epDtPgy1g0k7rpc0i9j30kc0lgtml.jpg\" alt=\"\" /></p>\n\n<ol>\n  <li>在 commit 中选择 specific commit，然后 pick，选择 dev 最新的分支，之后 push</li>\n</ol>\n\n<p><img src=\"http://ww1.sinaimg.cn/large/007epDtPgy1g0k7w55p4rj31xa1dg4qp.jpg\" alt=\"\" />\n<img src=\"http://ww1.sinaimg.cn/large/007epDtPgy1g0k7wf8y85j32e81iyhdt.jpg\" alt=\"\" /></p>","excerpt":"在工作中，公司要求每开始一个功能或者修复 bugs 时必须从 dev 中新建一个分支，再工作。\n现记录一下，防止忘记。","languages":null,"categories":["note"],"tags":["git"]},{"title":"动态改变 input 宽度","permalink":"https://sparanoid.com/dynamic-input-width.html","link":"https://sparanoid.com/dynamic-input-width.html","date":"2019-02-25T00:00:00-08:00","modified":"2019-03-05T02:15:27-08:00","author":{"name":"Jiajun Yan","url":"https://sparanoid.com/","email":"t@sparanoid.com"},"content":"<p>在工作中遇到这样一种情况，需要 <code class=\"highlighter-rouge\">input</code> 右对齐显示并输入金额。但 <code class=\"highlighter-rouge\">input</code> 有其默认的宽度，且不能随文字的输入动态改变。</p>\n\n<p>思考良久，想通过计算输入字体的长度而动态改变其宽度。实践时发现，其的确可以达到此目的，但有两个弊端：</p>\n<ol>\n  <li>性能要求高，在低配置手机会出现卡顿情况；</li>\n  <li>需要额外处理中英文字的宽度差距。通过请教同事后得知，有一个很巧妙且网上没有提及的解决办法。</li>\n</ol>\n\n<p><strong>效果：</strong>（<a href=\"https://v.youku.com/v_show/id_XNDA3ODAzNzYwNA==.html?spm=a2h3j.8428770.3416059.1\">前往优酷观看</a>）</p>\n\n<p>实现原理是，建立一个 <code class=\"highlighter-rouge\">view</code>，通过双向数据绑定，映射 <code class=\"highlighter-rouge\">input</code> 的输入的结果。</p>\n\n<p>换言之，创建一个 <code class=\"highlighter-rouge\">view</code> 和一个 <code class=\"highlighter-rouge\">input</code>，<code class=\"highlighter-rouge\">input</code> 输入时动态修改 <code class=\"highlighter-rouge\">data</code> 中的数据，并使用 <code class=\"highlighter-rouge\">view</code> 通过数据绑定显示出来。</p>\n\n<p>实际代码：</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;view</span> <span class=\"na\">class=</span><span class=\"s\">\"container\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;view</span> <span class=\"na\">class=</span><span class=\"s\">\"title\"</span><span class=\"nt\">&gt;</span>输入金额：<span class=\"nt\">&lt;/view&gt;</span>\n  <span class=\"nt\">&lt;view</span> <span class=\"na\">class=</span><span class=\"s\">\"input\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;view</span> <span class=\"na\">class=</span><span class=\"s\">\"currency\"</span><span class=\"nt\">&gt;</span>$<span class=\"nt\">&lt;/view&gt;</span>\n    <span class=\"nt\">&lt;view</span> <span class=\"na\">class=</span><span class=\"s\">\"amount\"</span> <span class=\"na\">bindtap=</span><span class=\"s\">\"invokeInput\"</span><span class=\"nt\">&gt;&lt;/view&gt;</span>\n    <span class=\"nt\">&lt;input</span> \n      <span class=\"na\">bindinput=</span><span class=\"s\">\"onInputChange\"</span> \n      <span class=\"na\">value=</span><span class=\"s\">\"\"</span> \n      <span class=\"na\">type=</span><span class=\"s\">\"digit\"</span> \n      <span class=\"na\">focus=</span><span class=\"s\">\"\"</span>\n      <span class=\"na\">hidden=</span><span class=\"s\">\"true\"</span> <span class=\"nt\">/&gt;</span>\n  <span class=\"nt\">&lt;/view&gt;</span>\n<span class=\"nt\">&lt;/view&gt;</span>\n</code></pre></div></div>\n\n<div class=\"language-css highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nc\">.container</span> <span class=\"p\">{</span>\n  <span class=\"nl\">display</span><span class=\"p\">:</span> <span class=\"n\">flex</span><span class=\"p\">;</span>\n  <span class=\"nl\">justify-content</span><span class=\"p\">:</span> <span class=\"n\">space-between</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nc\">.input</span> <span class=\"p\">{</span>\n  <span class=\"nl\">display</span><span class=\"p\">:</span> <span class=\"n\">flex</span><span class=\"p\">;</span>\n  <span class=\"nl\">align-items</span><span class=\"p\">:</span> <span class=\"nb\">center</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n</code></pre></div></div>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">app</span> <span class=\"o\">=</span> <span class=\"nx\">getApp</span><span class=\"p\">()</span>\n\n<span class=\"nx\">Page</span><span class=\"p\">({</span>\n  <span class=\"na\">data</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"na\">amount</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"p\">,</span>\n    <span class=\"na\">focus</span><span class=\"p\">:</span> <span class=\"kc\">false</span>\n  <span class=\"p\">},</span>\n\n  <span class=\"nx\">invokeInput</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">setData</span><span class=\"p\">({</span>\n      <span class=\"na\">focus</span><span class=\"p\">:</span> <span class=\"kc\">true</span>\n    <span class=\"p\">})</span>\n  <span class=\"p\">},</span>\n\n  <span class=\"nx\">onInputChange</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">amount</span> <span class=\"o\">=</span> <span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">detail</span><span class=\"p\">.</span><span class=\"nx\">value</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">setData</span><span class=\"p\">({</span>\n      <span class=\"nx\">amount</span>\n    <span class=\"p\">})</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">})</span>\n\n</code></pre></div></div>\n\n<p>具体实例和 demo 可以通过导入代码片段来查看：</p>\n\n<p><a href=\"https://developers.weixin.qq.com/s/YzPZlrmn7K6I\">\nhttps://developers.weixin.qq.com/s/YzPZlrmn7K6I</a></p>","excerpt":"在工作中遇到这样一种情况，需要 input 右对齐显示并输入金额。但 input 有其默认的宽度，且不能随文字的输入动态改变。","languages":null,"categories":["note"],"tags":["mp"]},{"title":"mpvue 使用注意事项","permalink":"https://sparanoid.com/mpvue-summary.html","link":"https://sparanoid.com/mpvue-summary.html","date":"2019-02-17T00:00:00-08:00","modified":"2019-02-17T05:58:13-08:00","author":{"name":"Jiajun Yan","url":"https://sparanoid.com/","email":"t@sparanoid.com"},"content":"<p><a href=\"http://mpvue.com/\">mpvue</a> 是基于 <code class=\"highlighter-rouge\">vue.js</code> 的小程序框架。经过最近几天的使用，相比原生的框架，其的确好处很多，适合有 <code class=\"highlighter-rouge\">vue.js</code> 的开发者，值得推荐。</p>\n\n<p>(<strong>不断更新</strong>)<br />\n以下我会将自己在使用 <code class=\"highlighter-rouge\">mpvue</code> 时遇到的注意点和 bug 汇总，方便自己查阅。</p>\n\n<ol>\n  <li>添加下拉刷新</li>\n</ol>\n\n<p>与原生不同，<code class=\"highlighter-rouge\">mpvue</code> 需要在页面目录下与 <code class=\"highlighter-rouge\">index.vue</code> 同级的 <code class=\"highlighter-rouge\">main.js</code> 中添加配置项，才可添加下拉刷新（<code class=\"highlighter-rouge\">onPullDownRefresh</code>）。</p>\n\n<p>在 <code class=\"highlighter-rouge\">main.js</code> 中添加：</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">{</span>\n  <span class=\"s2\">\"enablePullDownRefresh\"</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"backgroundTextStyle\"</span><span class=\"p\">:</span> <span class=\"s2\">\"dark\"</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>","excerpt":"mpvue 是基于 vue.js 的小程序框架。经过最近几天的使用，相比原生的框架，其的确好处很多，适合有 vue.js 的开发者，值得推荐。","languages":null,"categories":["note"],"tags":["mp"]},{"title":"小程序学习踩坑汇总（云开发篇）","permalink":"https://sparanoid.com/wechat-mini-program-bugs-cloud-functions.html","link":"https://sparanoid.com/wechat-mini-program-bugs-cloud-functions.html","date":"2019-02-10T00:00:00-08:00","modified":"2019-02-10T02:18:01-08:00","author":{"name":"Jiajun Yan","url":"https://sparanoid.com/","email":"t@sparanoid.com"},"content":"<p>小程序好处繁多，但坑也不少，现一边学习一边汇总云开发所遇到的 bugs。</p>\n\n<ol>\n  <li>\n    <p><code class=\"highlighter-rouge\">db.collection()</code> 写错数据库名没有提示</p>\n\n    <div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code> <span class=\"nx\">onGetList</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n     <span class=\"kd\">const</span> <span class=\"nx\">db</span> <span class=\"o\">=</span> <span class=\"nx\">wx</span><span class=\"p\">.</span><span class=\"nx\">cloud</span><span class=\"p\">.</span><span class=\"nx\">database</span><span class=\"p\">();</span>\n     <span class=\"c1\">// db.collection() 中的数据库名称若写错，console 没提示</span>\n     <span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">collection</span><span class=\"p\">(</span><span class=\"s1\">'123'</span><span class=\"p\">).</span><span class=\"nx\">limit</span><span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">).</span><span class=\"kd\">get</span><span class=\"p\">({</span>\n         <span class=\"nx\">success</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n             <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">);</span>\n         <span class=\"p\">}</span>\n     <span class=\"p\">})</span>\n <span class=\"p\">}</span>\n</code></pre></div>    </div>\n  </li>\n  <li>\n    <p>数据库没开放权限，返回数据为空</p>\n\n    <p>如果想让所有用户查看数据库的信息，必须开放数据库权限。</p>\n\n    <p>对于初学者来说，数据库默认为<code class=\"highlighter-rouge\">仅创建者及管理员可读写</code>，当请求数据时发现无数据（如下图），且没提示会增加不必要的学习成本。</p>\n\n    <p><img src=\"http://ww1.sinaimg.cn/large/007epDtPgy1g01gbufnhqj310w07y3zr.jpg\" alt=\"\" /></p>\n\n    <p>正确方法应是，于将数据库权限设置为<code class=\"highlighter-rouge\">所有用户可读，仅创建者及管理员可写</code>。</p>\n\n    <p><img src=\"http://ww1.sinaimg.cn/large/007epDtPgy1g01gdfti7fj31hu0naack.jpg\" alt=\"\" /></p>\n  </li>\n</ol>","excerpt":"小程序好处繁多，但坑也不少，现一边学习一边汇总云开发所遇到的 bugs。","languages":null,"categories":["note"],"tags":["mp"]},{"title":"理解 Redux","permalink":"https://sparanoid.com/understanding-redux.html","link":"https://sparanoid.com/understanding-redux.html","date":"2019-01-18T00:00:00-08:00","modified":"2019-01-18T03:33:50-08:00","author":{"name":"Jiajun Yan","url":"https://sparanoid.com/","email":"t@sparanoid.com"},"content":"<p><code class=\"highlighter-rouge\">Redux</code> 是一状态管理工具，主要应用于以下场景：</p>\n\n<blockquote>\n  <p>某个组件的状态，需要共享<br />\n某个状态需要在任何地方都可以拿到<br />\n一个组件需要改变全局状态<br />\n一个组件需要改变另一个组件的状态</p>\n</blockquote>\n\n<h1 id=\"1-基本概念和-api\">1. 基本概念和 API</h1>\n\n<blockquote>\n\n</blockquote>\n\n<ol>\n  <li>\n    <p>Store</p>\n\n    <p><code class=\"highlighter-rouge\">Store</code> 是保存数据的地方，整个应用只能有一个 <code class=\"highlighter-rouge\">Store</code>。</p>\n\n    <div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">createStore</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'redux'</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">store</span> <span class=\"o\">=</span> <span class=\"nx\">createStore</span><span class=\"p\">(</span><span class=\"nx\">reducer</span><span class=\"p\">);</span>\n</code></pre></div>    </div>\n  </li>\n  <li>\n    <p>State</p>\n\n    <p><code class=\"highlighter-rouge\">Store</code> 对象包含所有数据，包括 <code class=\"highlighter-rouge\">State</code>。</p>\n\n    <p><code class=\"highlighter-rouge\">store.getState()</code> 可用于获取 <code class=\"highlighter-rouge\">State</code>。</p>\n\n    <div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">createStore</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'redux'</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">store</span> <span class=\"o\">=</span> <span class=\"nx\">createStore</span><span class=\"p\">(</span><span class=\"nx\">fn</span><span class=\"p\">);</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">state</span> <span class=\"o\">=</span> <span class=\"nx\">store</span><span class=\"p\">.</span><span class=\"nx\">getState</span><span class=\"p\">();</span>\n</code></pre></div>    </div>\n\n    <blockquote>\n      <p>Redux 规定， 一个 State 对应一个 View。只要 State 相同，View 就相同，反之亦然。</p>\n    </blockquote>\n  </li>\n  <li>\n    <p>Action</p>\n\n    <p><code class=\"highlighter-rouge\">Action</code> 是由 <code class=\"highlighter-rouge\">View</code> 发出的通知，表示 <code class=\"highlighter-rouge\">State</code> 要发生变化。</p>\n\n    <div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">action</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"s1\">'ADD'</span><span class=\"p\">,</span>\n  <span class=\"na\">payload</span><span class=\"p\">:</span> <span class=\"s1\">'Learn Redux'</span>\n<span class=\"p\">};</span>\n</code></pre></div>    </div>\n  </li>\n  <li>\n    <p>Action Creator</p>\n\n    <p><code class=\"highlighter-rouge\">Action Creator</code> 指公用同一个 <code class=\"highlighter-rouge\">type</code>，但值可动态定义（类似函数的创建）。</p>\n\n    <div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">function</span> <span class=\"nx\">addTodo</span><span class=\"p\">(</span><span class=\"nx\">payload</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"p\">{</span>\n    <span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"s1\">'ADD'</span><span class=\"p\">,</span>\n    <span class=\"nx\">payload</span>\n  <span class=\"p\">};</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">action</span> <span class=\"o\">=</span> <span class=\"nx\">addTodo</span><span class=\"p\">(</span><span class=\"s1\">'Learn Redux'</span><span class=\"p\">);</span>\n</code></pre></div>    </div>\n  </li>\n  <li>\n    <p>store.dispatch()</p>\n\n    <p><code class=\"highlighter-rouge\">store.dispatch()</code> 是改变数据的唯一方法。</p>\n\n    <div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">createStore</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'redux'</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">store</span> <span class=\"o\">=</span> <span class=\"nx\">createStore</span><span class=\"p\">(</span><span class=\"nx\">reducer</span><span class=\"p\">);</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">action</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"s1\">'ADD'</span><span class=\"p\">,</span>\n  <span class=\"na\">payload</span><span class=\"p\">:</span> <span class=\"s1\">'Learn Redux'</span>\n<span class=\"p\">};</span>\n\n<span class=\"nx\">store</span><span class=\"p\">.</span><span class=\"nx\">dispatch</span><span class=\"p\">(</span><span class=\"nx\">action</span><span class=\"p\">);</span>\n</code></pre></div>    </div>\n  </li>\n  <li>\n    <p>Reducer</p>\n\n    <p><code class=\"highlighter-rouge\">Reducer</code> 是一个函数，接收 <code class=\"highlighter-rouge\">Action</code> 和 <code class=\"highlighter-rouge\">State</code> 两个参数，返回新的 <code class=\"highlighter-rouge\">State</code>，从而更新 <code class=\"highlighter-rouge\">State</code>。</p>\n\n    <p><code class=\"highlighter-rouge\">Reducer</code> 一般会有默认的 <code class=\"highlighter-rouge\">State</code>。</p>\n\n    <div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">initState</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">reducer</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">state</span> <span class=\"o\">=</span> <span class=\"nx\">initState</span><span class=\"p\">,</span> <span class=\"nx\">action</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">switch</span> <span class=\"p\">(</span><span class=\"nx\">action</span><span class=\"p\">.</span><span class=\"nx\">type</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">case</span> <span class=\"s1\">'ADD'</span><span class=\"p\">:</span>\n      <span class=\"k\">return</span> <span class=\"nx\">state</span> <span class=\"o\">+</span> <span class=\"nx\">action</span><span class=\"p\">.</span><span class=\"nx\">payload</span><span class=\"p\">;</span>\n    <span class=\"nl\">default</span><span class=\"p\">:</span>\n      <span class=\"k\">return</span> <span class=\"nx\">state</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre></div>    </div>\n\n    <p>在使用时，于 <code class=\"highlighter-rouge\">createStore()</code> 添加 <code class=\"highlighter-rouge\">reducer</code> 即可。</p>\n  </li>\n  <li>\n    <p>store.subscribe()</p>\n\n    <p><code class=\"highlighter-rouge\">store.subscribe()</code> 用于监听 <code class=\"highlighter-rouge\">State</code> 的变化。</p>\n\n    <div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">store</span><span class=\"p\">.</span><span class=\"nx\">subscribe</span><span class=\"p\">(</span><span class=\"nx\">listener</span><span class=\"p\">);</span>\n</code></pre></div>    </div>\n  </li>\n</ol>\n\n<h1 id=\"2-redux-的工作流程\">2. Redux 的工作流程</h1>\n\n<p>简单来说，就是：</p>\n\n<ol>\n  <li><code class=\"highlighter-rouge\">store.dispatch(action)</code></li>\n  <li>调用 <code class=\"highlighter-rouge\">Reducer</code>，返回新的 <code class=\"highlighter-rouge\">State</code></li>\n  <li><code class=\"highlighter-rouge\">store.subscribe()</code> 监听新的 <code class=\"highlighter-rouge\">State</code></li>\n  <li><code class=\"highlighter-rouge\">store.getState()</code> 获取新的 <code class=\"highlighter-rouge\">State</code>，重新渲染 <code class=\"highlighter-rouge\">View</code></li>\n</ol>\n\n<p>我的理解：</p>\n\n<p><code class=\"highlighter-rouge\">Store</code> 是一个大容器，包含很多个 <code class=\"highlighter-rouge\">State</code>。要改变 <code class=\"highlighter-rouge\">State</code>，需要通过 <code class=\"highlighter-rouge\">dispatch()</code> 发起请求，然后 <code class=\"highlighter-rouge\">Reducer</code> 根据请求内容（<code class=\"highlighter-rouge\">action</code>）返回新的 <code class=\"highlighter-rouge\">State</code>。最后用 <code class=\"highlighter-rouge\">getState()</code> 获取新的数据。</p>\n\n<hr />\n\n<p>理解后，在项目中用得还是太少，很容易忘记。</p>","excerpt":"Redux 是一状态管理工具，主要应用于以下场景：","languages":null,"categories":["note"],"tags":["react"]},{"title":"理解使用 React-Redux","permalink":"https://sparanoid.com/understanding-react-redux.html","link":"https://sparanoid.com/understanding-react-redux.html","date":"2019-01-18T00:00:00-08:00","modified":"2019-01-18T03:33:39-08:00","author":{"name":"Jiajun Yan","url":"https://sparanoid.com/","email":"t@sparanoid.com"},"content":"<p>要理解 React-Redux，需要理解下面三个东西：</p>\n\n<blockquote>\n  <p>connect()<br />\nmapStateToProps<br />\nmapDispatchToProps</p>\n</blockquote>\n\n<hr />\n\n<h2 id=\"1-connect\">1. connect()</h2>\n\n<p><code class=\"highlighter-rouge\">connect()</code> 就是将当前的 UI 组件（presentational component）和 <code class=\"highlighter-rouge\">Redux</code> 连接起来。</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">connect</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'react-redux'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">VisibleTodoList</span> <span class=\"o\">=</span> <span class=\"nx\">connect</span><span class=\"p\">(</span>\n  <span class=\"nx\">mapStateToProps</span><span class=\"p\">,</span>\n  <span class=\"nx\">mapDispatchToProps</span>\n<span class=\"p\">)(</span><span class=\"nx\">TodoList</span><span class=\"p\">);</span>\n</code></pre></div></div>\n\n<h2 id=\"2-mapstatetoprops\">2. mapStateToProps</h2>\n\n<p><code class=\"highlighter-rouge\">mapStateToProps</code>，顾名思义，就是将接收到的 <code class=\"highlighter-rouge\">State</code> 处理后返回到当前组件中的 <code class=\"highlighter-rouge\">props</code>。</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">mapStateToProps</span> <span class=\"o\">=</span> <span class=\"nx\">state</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"p\">{</span>\n    <span class=\"na\">todos</span><span class=\"p\">:</span> <span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">todos</span>\n  <span class=\"p\">};</span>\n<span class=\"p\">};</span>\n</code></pre></div></div>\n\n<p>通过 <code class=\"highlighter-rouge\">this.props.todos</code> 获取。</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">todos</span><span class=\"p\">);</span>\n</code></pre></div></div>\n\n<h2 id=\"3-mapdispatchtoprops\">3. mapDispatchToProps</h2>\n\n<p><code class=\"highlighter-rouge\">mapDispatchToProps</code> 其实就是 <code class=\"highlighter-rouge\">Redux</code> 中的 <code class=\"highlighter-rouge\">store.dispatch()</code>。</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">action</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"s1\">'ADD'</span><span class=\"p\">,</span>\n  <span class=\"na\">payload</span><span class=\"p\">:</span> <span class=\"s1\">'Learn React-Redux'</span>\n<span class=\"p\">};</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">mapDispatchToProps</span> <span class=\"o\">=</span> <span class=\"nx\">dispatch</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"p\">{</span>\n    <span class=\"na\">add</span><span class=\"p\">:</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n      <span class=\"nx\">dispatch</span><span class=\"p\">(</span><span class=\"nx\">action</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">};</span>\n<span class=\"p\">};</span>\n</code></pre></div></div>\n\n<p>之后在需要的地方调用即可。</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">add</span><span class=\"p\">();</span>\n</code></pre></div></div>","excerpt":"要理解 React-Redux，需要理解下面三个东西：","languages":null,"categories":["note"],"tags":["react"]},{"title":"ES 6 新特性","permalink":"https://sparanoid.com/es6-features.html","link":"https://sparanoid.com/es6-features.html","date":"2019-01-16T00:00:00-08:00","modified":"2019-01-17T19:58:38-08:00","author":{"name":"Jiajun Yan","url":"https://sparanoid.com/","email":"t@sparanoid.com"},"content":"<blockquote>\n  <p>在复习 ES6 的时候，发现有几个新特性经常在工作中用到，今天便再次整理一下。</p>\n</blockquote>\n\n<p>索引：</p>\n<ol>\n  <li>let 和 const</li>\n  <li>箭头函数</li>\n  <li>模版字符串</li>\n  <li>Class 类</li>\n  <li>参数默认值</li>\n  <li>数组的展开运算</li>\n  <li>模块化</li>\n  <li>Promise</li>\n</ol>\n\n<hr />\n\n<h1 id=\"1-let-和-const\">1. let 和 const</h1>\n<blockquote>\n\n</blockquote>\n\n<p>两者都为块级作用域。</p>\n\n<p>let 声明局部变量，而 const 声明常量（不可修改）。</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-js\" data-lang=\"js\"><table class=\"rouge-table\"><tbody><tr><td class=\"gutter gl\"><pre class=\"lineno\">1\n2\n</pre></td><td class=\"code\"><pre><span class=\"kd\">const</span> <span class=\"nx\">EXAMPLE</span> <span class=\"o\">=</span> <span class=\"s1\">'This is an example.'</span><span class=\"p\">;</span> <span class=\"c1\">// 声明常量时，尽量全大写</span>\n<span class=\"nx\">EXAMPLE</span> <span class=\"o\">=</span> <span class=\"s1\">'Example is altered.'</span><span class=\"p\">;</span> <span class=\"c1\">// 报错</span></pre></td></tr></tbody></table></code></pre></figure>\n\n<h1 id=\"2-箭头函数\">2. 箭头函数</h1>\n<blockquote>\n\n</blockquote>\n\n<p>箭头函数最直观的三个特点：</p>\n\n<blockquote>\n  <p>不需要 function 关键字来创建函数。<br />\n省略 return 关键字。<br />\n继承当前上下文的 this 关键字。</p>\n</blockquote>\n\n<p>而我发现，在工作中，箭头函数最能带给我的便利是对定义函数的简写，以及无需重新定义 <code class=\"highlighter-rouge\">this</code> 来继承上下文。</p>\n\n<ul>\n  <li>函数简写：</li>\n</ul>\n\n<figure class=\"highlight\"><pre><code class=\"language-js\" data-lang=\"js\"><table class=\"rouge-table\"><tbody><tr><td class=\"gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n</pre></td><td class=\"code\"><pre><span class=\"kd\">const</span> <span class=\"nx\">example</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">param1</span><span class=\"p\">,</span> <span class=\"nx\">param2</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"nx\">param1</span> <span class=\"o\">+</span> <span class=\"nx\">param2</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n\n<span class=\"c1\">// 如果函数内之后一行 return，也可继续简写为：</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">example</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">param1</span><span class=\"p\">,</span> <span class=\"nx\">param2</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">param1</span> <span class=\"o\">+</span> <span class=\"nx\">param2</span><span class=\"p\">;</span></pre></td></tr></tbody></table></code></pre></figure>\n\n<ul>\n  <li>自动继承上下文的 <code class=\"highlighter-rouge\">this</code> 关键字：</li>\n</ul>\n\n<figure class=\"highlight\"><pre><code class=\"language-js\" data-lang=\"js\"><table class=\"rouge-table\"><tbody><tr><td class=\"gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n</pre></td><td class=\"code\"><pre><span class=\"kd\">function</span> <span class=\"nx\">Person</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// Person() 构造函数定义 `this`作为它自己的实例.</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">age</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\n  <span class=\"nx\">setInterval</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"nx\">growUp</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// 在非严格模式, growUp()函数定义 `this`作为全局对象,</span>\n    <span class=\"c1\">// 与在 Person()构造函数中定义的 `this`并不相同.</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">age</span><span class=\"o\">++</span><span class=\"p\">;</span>\n  <span class=\"p\">},</span> <span class=\"mi\">1000</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">var</span> <span class=\"nx\">p</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Person</span><span class=\"p\">();</span></pre></td></tr></tbody></table></code></pre></figure>\n\n<h1 id=\"3-模版字符串\">3. 模版字符串</h1>\n<blockquote>\n\n</blockquote>\n\n<p>相比 ES5，ES 6 中的模版字符串消除了很多繁琐的拼接。使用 ` `` ` 即可完成。如果需要传入变量，使用 <code class=\"highlighter-rouge\">${}</code> 即可。</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-js\" data-lang=\"js\"><table class=\"rouge-table\"><tbody><tr><td class=\"gutter gl\"><pre class=\"lineno\">1\n2\n</pre></td><td class=\"code\"><pre><span class=\"kd\">const</span> <span class=\"nx\">day</span> <span class=\"o\">=</span> <span class=\"s1\">'Sunday'</span><span class=\"p\">;</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">`Today is </span><span class=\"p\">${</span><span class=\"nx\">day</span><span class=\"p\">}</span><span class=\"s2\">`</span><span class=\"p\">);</span> <span class=\"c1\">// Today is Sunday</span></pre></td></tr></tbody></table></code></pre></figure>\n\n<h1 id=\"4-class-类\">4. Class 类</h1>\n<blockquote>\n\n</blockquote>\n\n<p><code class=\"highlighter-rouge\">class</code> 语法为原型链的语法糖表现形式。\n在 React 项目中，我们会经常看到这样的表达式：</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-js\" data-lang=\"js\"><table class=\"rouge-table\"><tbody><tr><td class=\"gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre></td><td class=\"code\"><pre><span class=\"c1\">// 引用...</span>\n<span class=\"p\">...</span>\n\n<span class=\"kd\">class</span> <span class=\"nx\">App</span> <span class=\"kd\">extends</span> <span class=\"nx\">Components</span> <span class=\"p\">{</span>\n\n    <span class=\"kd\">constructor</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">super</span><span class=\"p\">();</span> <span class=\"c1\">// 继承父类</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"p\">...</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">getList</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"p\">...</span>\n    <span class=\"p\">}</span>\n\n<span class=\"p\">}</span></pre></td></tr></tbody></table></code></pre></figure>\n\n<p>以上就 <code class=\"highlighter-rouge\">class</code> 在 ES 6 的体现。</p>\n\n<h1 id=\"5-参数默认值\">5. 参数默认值</h1>\n<blockquote>\n\n</blockquote>\n\n<figure class=\"highlight\"><pre><code class=\"language-js\" data-lang=\"js\"><table class=\"rouge-table\"><tbody><tr><td class=\"gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n</pre></td><td class=\"code\"><pre><span class=\"kd\">function</span> <span class=\"nx\">printText</span><span class=\"p\">(</span><span class=\"nx\">text</span> <span class=\"o\">=</span> <span class=\"s1\">'default'</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">text</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">printText</span><span class=\"p\">(</span><span class=\"s1\">'hello'</span><span class=\"p\">);</span> <span class=\"c1\">// hello</span>\n<span class=\"nx\">printText</span><span class=\"p\">();</span> <span class=\"c1\">// default</span></pre></td></tr></tbody></table></code></pre></figure>\n\n<h1 id=\"6-数组的展开运算\">6. 数组的展开运算</h1>\n<blockquote>\n\n</blockquote>\n\n<p>在传入的数组前添加三个点 <code class=\"highlighter-rouge\">...</code>：</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-js\" data-lang=\"js\"><table class=\"rouge-table\"><tbody><tr><td class=\"gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n</pre></td><td class=\"code\"><pre><span class=\"kd\">function</span> <span class=\"nx\">foo</span><span class=\"p\">(</span><span class=\"nx\">x</span><span class=\"p\">,</span> <span class=\"nx\">y</span><span class=\"p\">,</span> <span class=\"nx\">z</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">x</span><span class=\"p\">,</span> <span class=\"nx\">y</span><span class=\"p\">,</span> <span class=\"nx\">z</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n<span class=\"kd\">const</span> <span class=\"nx\">arr</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">];</span>\n<span class=\"nx\">foo</span><span class=\"p\">(...</span><span class=\"nx\">arr</span><span class=\"p\">);</span> <span class=\"c1\">// 1, 2, 3</span></pre></td></tr></tbody></table></code></pre></figure>\n\n<h1 id=\"7-模块化\">7. 模块化</h1>\n<blockquote>\n\n</blockquote>\n\n<p>使用 <code class=\"highlighter-rouge\">import</code> 和 <code class=\"highlighter-rouge\">export</code> 引入导出函数：</p>\n\n<ul>\n  <li>module.js</li>\n</ul>\n\n<figure class=\"highlight\"><pre><code class=\"language-js\" data-lang=\"js\"><table class=\"rouge-table\"><tbody><tr><td class=\"gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n</pre></td><td class=\"code\"><pre><span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">port</span> <span class=\"o\">=</span> <span class=\"mi\">3000</span><span class=\"p\">;</span>\n<span class=\"k\">export</span> <span class=\"kd\">function</span> <span class=\"nx\">getURL</span><span class=\"p\">(</span><span class=\"nx\">url</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"p\">...</span>\n<span class=\"p\">}</span></pre></td></tr></tbody></table></code></pre></figure>\n\n<ul>\n  <li>main.js</li>\n</ul>\n\n<figure class=\"highlight\"><pre><code class=\"language-js\" data-lang=\"js\"><table class=\"rouge-table\"><tbody><tr><td class=\"gutter gl\"><pre class=\"lineno\">1\n2\n</pre></td><td class=\"code\"><pre><span class=\"k\">import</span> <span class=\"p\">{</span><span class=\"nx\">port</span><span class=\"p\">,</span> <span class=\"nx\">getURL</span><span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./main'</span><span class=\"p\">;</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">port</span><span class=\"p\">);</span></pre></td></tr></tbody></table></code></pre></figure>\n\n<h1 id=\"8-promise\">8. Promise</h1>\n<blockquote>\n\n</blockquote>\n\n<p>简单来说，<code class=\"highlighter-rouge\">Promise</code> 可解决回调地狱和实现异步函数顺序执行。</p>\n\n<p>而当中的关键字为别为：<code class=\"highlighter-rouge\">Promise</code>，<code class=\"highlighter-rouge\">resolve</code>，<code class=\"highlighter-rouge\">reject</code> 和 <code class=\"highlighter-rouge\">then</code>。</p>\n\n<p><code class=\"highlighter-rouge\">Promise</code> 用于新建一个 <code class=\"highlighter-rouge\">Promise</code> 对象，使用 <code class=\"highlighter-rouge\">resolve</code> 进行成功回调，<code class=\"highlighter-rouge\">reject</code> 进行失败回调。最后用 <code class=\"highlighter-rouge\">then</code> 处理链式操作。</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-js\" data-lang=\"js\"><table class=\"rouge-table\"><tbody><tr><td class=\"gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n</pre></td><td class=\"code\"><pre><span class=\"c1\">// 异步函数a</span>\n<span class=\"kd\">var</span> <span class=\"nx\">a</span> <span class=\"o\">=</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"nb\">Promise</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">resolve</span><span class=\"p\">,</span> <span class=\"nx\">reject</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">setTimeout</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n      <span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"s1\">'a'</span><span class=\"p\">)</span>\n    <span class=\"p\">},</span> <span class=\"mi\">1000</span><span class=\"p\">)</span>\n  <span class=\"p\">})</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// 异步函数b</span>\n<span class=\"kd\">var</span> <span class=\"nx\">b</span> <span class=\"o\">=</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"nb\">Promise</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">resolve</span><span class=\"p\">,</span> <span class=\"nx\">reject</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"nx\">data</span> <span class=\"o\">+</span> <span class=\"s1\">'b'</span><span class=\"p\">)</span>\n  <span class=\"p\">})</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// 异步函数c</span>\n<span class=\"kd\">var</span> <span class=\"nx\">c</span> <span class=\"o\">=</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"nb\">Promise</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">resolve</span><span class=\"p\">,</span> <span class=\"nx\">reject</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">setTimeout</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n      <span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"nx\">data</span> <span class=\"o\">+</span> <span class=\"s1\">'c'</span><span class=\"p\">)</span>\n    <span class=\"p\">},</span> <span class=\"mi\">500</span><span class=\"p\">)</span>\n  <span class=\"p\">})</span>\n<span class=\"p\">}</span></pre></td></tr></tbody></table></code></pre></figure>\n\n<p>之后使用then链式操作:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-js\" data-lang=\"js\"><table class=\"rouge-table\"><tbody><tr><td class=\"gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre></td><td class=\"code\"><pre><span class=\"c1\">//链式调用</span>\n<span class=\"nx\">a</span><span class=\"p\">()</span>\n  <span class=\"p\">.</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"nx\">b</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">)</span>\n  <span class=\"p\">})</span>\n  <span class=\"p\">.</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"nx\">c</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">)</span>\n  <span class=\"p\">})</span>\n  <span class=\"p\">.</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">)</span><span class=\"c1\">// abc</span>\n  <span class=\"p\">})</span></pre></td></tr></tbody></table></code></pre></figure>","excerpt":"在复习 ES6 的时候，发现有几个新特性经常在工作中用到，今天便再次整理一下。","languages":null,"categories":["note"],"tags":["js"]},{"title":"Git 项目迁移","permalink":"https://sparanoid.com/git-clone-repository.html","link":"https://sparanoid.com/git-clone-repository.html","date":"2019-01-08T00:00:00-08:00","modified":"2019-01-15T07:19:15-08:00","author":{"name":"Jiajun Yan","url":"https://sparanoid.com/","email":"t@sparanoid.com"},"content":"<p>有时候公司需要将现有的 Git 项目迁移到新的仓库，需要保留历史提交记录等。</p>\n\n<p>可使用以下命令：</p>\n\n<pre><code class=\"language-linux\">mkdir foo; cd foo \n# move to a scratch dir\n\ngit clone --bare https://github.com/exampleuser/old-repository.git\n# Make a bare clone of the repository\n\ncd old-repository.git\ngit push --mirror https://github.com/exampleuser/new-repository.git\n# Mirror-push to the new repository\n\ncd ..\nrm -rf old-repository.git  \n# Remove our temporary local repository\n</code></pre>\n\n<p>如果是 Mac OS，则需要在 Keychain Access 中删除对应的登录记录，例如 GitHub 相关的账号密码。</p>","excerpt":"有时候公司需要将现有的 Git 项目迁移到新的仓库，需要保留历史提交记录等。","languages":null,"categories":["note"],"tags":["git"]},{"title":"前端知识总结（一）","permalink":"https://sparanoid.com/web-development-handbook-1.html","link":"https://sparanoid.com/web-development-handbook-1.html","date":"2019-01-03T00:00:00-08:00","modified":"2019-01-18T06:50:16-08:00","author":{"name":"Jiajun Yan","url":"https://sparanoid.com/","email":"t@sparanoid.com"},"content":"<blockquote>\n  <p>我总结了一些我认为比较重要的，笔试面试中会出现的知识要点，并非将所有前端知识覆盖。</p>\n</blockquote>\n\n<p>速查：</p>\n\n<ol>\n  <li>前端性能优化的方法</li>\n  <li>跨域</li>\n</ol>\n\n<hr />\n\n<h1 id=\"1-前端性能优化的方法\">1. 前端性能优化的方法</h1>\n<blockquote>\n\n</blockquote>\n\n<ol>\n  <li>\n    <p>CSS 精灵图, 代码压缩、图片控制大小；网页Gzip，CDN托管</p>\n  </li>\n  <li>\n    <p>前端用变量保存AJAX请求结果，减少请求</p>\n  </li>\n  <li>\n    <p>用 <code class=\"highlighter-rouge\">innerHTML</code> 代替 <code class=\"highlighter-rouge\">DOM</code> 操作，减少 <code class=\"highlighter-rouge\">DOM</code> 操作次数</p>\n  </li>\n  <li>\n    <p>图片预加载，将样式表放在顶部，将脚本放在底部</p>\n  </li>\n  <li>\n    <p>避免使用 <code class=\"highlighter-rouge\">table</code>，<code class=\"highlighter-rouge\">table</code> 要等其中的内容完全下载之后才会显示出来，显示比 <code class=\"highlighter-rouge\">div + css</code> 布局慢。</p>\n  </li>\n</ol>\n\n<p>参考：<a href=\"https://juejin.im/entry/5b30b64c51882574d32496de\">前端工程师面试题(性能优化)</a></p>\n\n<h1 id=\"2-跨域\">2. 跨域</h1>\n<blockquote>\n\n</blockquote>\n\n<p>跨域指的是只能在本网址下访问，其他域请求禁止。</p>\n\n<p>关键词：<code class=\"highlighter-rouge\">同源策略</code>。</p>\n\n<p>只要以下任意条件不相同，即为跨域</p>\n<blockquote>\n  <p>协议：<code class=\"highlighter-rouge\">http://</code>， <code class=\"highlighter-rouge\">https://</code><br />\n域名：<code class=\"highlighter-rouge\">www.google.com</code><br />\n端口：<code class=\"highlighter-rouge\">80</code>，<code class=\"highlighter-rouge\">443</code></p>\n</blockquote>\n\n<ol>\n  <li>\n    <p>允许跨域的三个标签</p>\n\n    <p><code class=\"highlighter-rouge\">&lt;img&gt;</code>， <code class=\"highlighter-rouge\">&lt;link&gt;</code>， <code class=\"highlighter-rouge\">&lt;script&gt;</code></p>\n  </li>\n  <li>\n    <p>跨域的几种方式</p>\n\n    <ol>\n      <li>\n        <p>JSONP</p>\n\n        <p><code class=\"highlighter-rouge\">JSONP</code> 只支持 <code class=\"highlighter-rouge\">GET</code>。其利用 <code class=\"highlighter-rouge\">&lt;script&gt;</code> 可以允许跨域的漏洞，动态添加 <code class=\"highlighter-rouge\">&lt;script&gt;</code> 标签来调用服务器提供的 <code class=\"highlighter-rouge\">JS</code> 脚本。</p>\n      </li>\n      <li>\n        <p>服务端 http request</p>\n      </li>\n    </ol>\n  </li>\n</ol>","excerpt":"我总结了一些我认为比较重要的，笔试面试中会出现的知识要点，并非将所有前端知识覆盖。","languages":null,"categories":["note"],"tags":["handbook"]},{"title":"管理 NPM 镜像地址","permalink":"https://sparanoid.com/manage-npm-sources.html","link":"https://sparanoid.com/manage-npm-sources.html","date":"2018-12-29T00:00:00-08:00","modified":"2019-01-17T19:58:38-08:00","author":{"name":"Jiajun Yan","url":"https://sparanoid.com/","email":"t@sparanoid.com"},"content":"<p>由于 NPM 默认镜像地址在国内经常出现不稳定的情况，因而用户经常需要切换到淘宝到镜像地址。</p>\n\n<p>而当我们需要切换回默认的地址时，很多时候都无法记住其详细的链接，只能再次网上搜索，当中产生的时间成本毫无必要。</p>\n\n<p>要解决此情况，使用 NRM 即可。</p>\n\n<ol>\n  <li>\n    <p>于 Terminal 终端输入：</p>\n\n    <div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>npm install -g nrm\n</code></pre></div>    </div>\n  </li>\n  <li>\n    <p>查看镜像列表</p>\n\n    <div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code> nrm ls\n</code></pre></div>    </div>\n\n    <p><img src=\"http://ww1.sinaimg.cn/large/007epDtPgy1fz7nr4wskoj312q0qigtz.jpg\" alt=\"\" /></p>\n\n    <p>地址旁的星号（*）指的是当前选中的镜像。</p>\n  </li>\n  <li>\n    <p>切换镜像地址</p>\n\n    <p>选择某个镜像，输入以下命令即可切换</p>\n\n    <div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code> ```\n nrm use npm\n ```\n</code></pre></div>    </div>\n\n    <p><img src=\"http://ww1.sinaimg.cn/large/007epDtPgy1fz7nseg1doj312q0qi7db.jpg\" alt=\"\" /></p>\n  </li>\n</ol>","excerpt":"由于 NPM 默认镜像地址在国内经常出现不稳定的情况，因而用户经常需要切换到淘宝到镜像地址。","languages":null,"categories":["note"],"tags":["work"]},{"title":"使用 JSON-server 创建假数据","permalink":"https://sparanoid.com/json-server.html","link":"https://sparanoid.com/json-server.html","date":"2018-12-12T00:00:00-08:00","modified":"2019-01-17T07:25:39-08:00","author":{"name":"Jiajun Yan","url":"https://sparanoid.com/","email":"t@sparanoid.com"},"content":"<blockquote>\n  <p>工作中前后端分离开发，当后台还没写好对应的 API 时，前端工程师必须自己模拟数据进行调试，避免时间浪费。</p>\n</blockquote>\n\n<p><a href=\"https://github.com/typicode/json-server\">JSON-server</a> 在本地环境建立了 <code class=\"highlighter-rouge\">REST</code> 风格的 <code class=\"highlighter-rouge\">API</code> 接口，给前端页面提供模拟数据，加快开发进度。</p>\n\n<ol>\n  <li>\n    <p>下载</p>\n\n    <p>我根据 <a href=\"https://www.youtube.com/watch?v=1zkgdLZEdwM\">Traversy Media 的视频教程</a> 写了一个 <code class=\"highlighter-rouge\">json-server</code> 的项目，读者只需将其克隆到本地环境，安装即可。</p>\n\n    <p>项目地址：<a href=\"https://github.com/realfrancisyan/create-json-server\">create-json-server</a>。</p>\n  </li>\n  <li>\n    <p>安装运行</p>\n\n    <p>于终端运行：</p>\n\n    <div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>npm install\n\nnpm run json:server\n</code></pre></div>    </div>\n\n    <p>至此安装完毕，浏览器访问 <a href=\"http://127.0.0.1:8090\"><code class=\"highlighter-rouge\">http://127.0.0.1:8090</code></a>，如下：</p>\n\n    <p><img src=\"http://ww1.sinaimg.cn/large/007epDtPgy1fz9zb03aojj315o0qkmy4.jpg\" alt=\"\" /></p>\n  </li>\n  <li>\n    <p>使用</p>\n\n    <p>其使用方式非常简单，和往常发送 <code class=\"highlighter-rouge\">AJAX</code> 一样。</p>\n\n    <p>以 <a href=\"https://www.getpostman.com/\">Postman</a> 为例，发送默认的 <code class=\"highlighter-rouge\">GET</code> 请求到 <code class=\"highlighter-rouge\">http://127.0.0.1:8090/orgLesson/week</code> 会获得如下结果：</p>\n\n    <p><img src=\"http://ww1.sinaimg.cn/large/007epDtPgy1fz9ze810x5j315o0ti7fj.jpg\" alt=\"\" /></p>\n  </li>\n  <li>\n    <p>修改 JSON 内容</p>\n\n    <p>所有 <code class=\"highlighter-rouge\">JSON</code> 的返回结果都储存在 <code class=\"highlighter-rouge\">db.json</code> 里：</p>\n\n    <div class=\"language-json highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"s2\">\"orgLessonWeek\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"s2\">\"name\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"sample\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"date\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"Thu Jan 17 2019 22:22:49\"</span><span class=\"w\">\n  </span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div>    </div>\n\n    <p>其中 <code class=\"highlighter-rouge\">orgLessonWeek</code> 是 <code class=\"highlighter-rouge\">API</code> 接口名，他的值则为接口内容，按需修改即可。如需添加多个接口，用逗号续写：</p>\n\n    <div class=\"language-json highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"s2\">\"orgLessonWeek\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"s2\">\"name\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"sample\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"date\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"Thu Jan 17 2019 22:22:49\"</span><span class=\"w\">\n  </span><span class=\"p\">},</span><span class=\"w\">\n  </span><span class=\"s2\">\"orgLessonMonth\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"s2\">\"name\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"sample month\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"date\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"Thu Jan 17 2019 22:22:49\"</span><span class=\"w\">\n  </span><span class=\"p\">},</span><span class=\"w\">\n  </span><span class=\"s2\">\"orgLessonYear\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"s2\">\"name\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"sample year\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"date\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"Thu Jan 17 2019 22:22:49\"</span><span class=\"w\">\n  </span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div>    </div>\n  </li>\n  <li>\n    <p>自定义接口名</p>\n\n    <p>在实际开发中，接口通常会有多个 <code class=\"highlighter-rouge\">/</code> 连接。这在 <code class=\"highlighter-rouge\">db.json</code> 文件中的 <code class=\"highlighter-rouge\">key</code> 里是不允许的。</p>\n\n    <p>因而可以修改 <code class=\"highlighter-rouge\">routes.json</code>，根据接口修改路由。</p>\n\n    <div class=\"language-json highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"s2\">\"/orgLesson/week\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"/orgLessonWeek\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"s2\">\"/orgLesson/Month\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"/orgLessonMonth\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"s2\">\"/orgLessonYear\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"/orgLessonYear\"</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div>    </div>\n\n    <p>注意每个接口名的前面均要添加 <code class=\"highlighter-rouge\">/</code>。</p>\n  </li>\n</ol>\n\n<p>更详细的教程可参考：<a href=\"https://www.youtube.com/watch?v=1zkgdLZEdwM\">Create a Fake REST API with JSON-Server</a></p>","excerpt":"工作中前后端分离开发，当后台还没写好对应的 API 时，前端工程师必须自己模拟数据进行调试，避免时间浪费。","languages":null,"categories":["note"],"tags":["work"]},{"title":"类型检测","permalink":"https://sparanoid.com/typechecking-with-proptypes.html","link":"https://sparanoid.com/typechecking-with-proptypes.html","date":"2018-11-23T00:00:00-08:00","modified":"2019-01-17T19:58:38-08:00","author":{"name":"Jiajun Yan","url":"https://sparanoid.com/","email":"t@sparanoid.com"},"content":"<p>随着应用规模的提升，你可以通过类型检测捕捉更多的 bugs，确保接收到的参数是有效的。</p>\n\n<p>简单例子：</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">import</span> <span class=\"nx\">PropTypes</span> <span class=\"k\">from</span> <span class=\"s1\">'prop-types'</span><span class=\"p\">;</span>\n\n<span class=\"nx\">MyComponent</span><span class=\"p\">.</span><span class=\"nx\">propTypes</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// You can declare that a prop is a specific JS type. By default, these</span>\n  <span class=\"c1\">// are all optional.</span>\n  <span class=\"na\">optionalArray</span><span class=\"p\">:</span> <span class=\"nx\">PropTypes</span><span class=\"p\">.</span><span class=\"nx\">array</span><span class=\"p\">,</span>\n  <span class=\"na\">optionalBool</span><span class=\"p\">:</span> <span class=\"nx\">PropTypes</span><span class=\"p\">.</span><span class=\"nx\">bool</span><span class=\"p\">,</span>\n  <span class=\"na\">optionalFunc</span><span class=\"p\">:</span> <span class=\"nx\">PropTypes</span><span class=\"p\">.</span><span class=\"nx\">func</span><span class=\"p\">,</span>\n  <span class=\"na\">optionalNumber</span><span class=\"p\">:</span> <span class=\"nx\">PropTypes</span><span class=\"p\">.</span><span class=\"nx\">number</span><span class=\"p\">,</span>\n  <span class=\"na\">optionalObject</span><span class=\"p\">:</span> <span class=\"nx\">PropTypes</span><span class=\"p\">.</span><span class=\"nx\">object</span><span class=\"p\">,</span>\n  <span class=\"na\">optionalString</span><span class=\"p\">:</span> <span class=\"nx\">PropTypes</span><span class=\"p\">.</span><span class=\"nx\">string</span><span class=\"p\">,</span>\n  <span class=\"na\">optionalSymbol</span><span class=\"p\">:</span> <span class=\"nx\">PropTypes</span><span class=\"p\">.</span><span class=\"nx\">symbol</span>\n<span class=\"p\">};</span>\n</code></pre></div></div>\n\n<p>参考：</p>\n\n<p><a href=\"https://reactjs.org/docs/typechecking-with-proptypes.html\">Typechecking With PropTypes</a></p>","excerpt":"随着应用规模的提升，你可以通过类型检测捕捉更多的 bugs，确保接收到的参数是有效的。","languages":null,"categories":["note"],"tags":["react"]},{"title":"UI 和逻辑分离","permalink":"https://sparanoid.com/presentational-vs-containers.html","link":"https://sparanoid.com/presentational-vs-containers.html","date":"2018-11-23T00:00:00-08:00","modified":"2019-01-17T19:58:38-08:00","author":{"name":"Jiajun Yan","url":"https://sparanoid.com/","email":"t@sparanoid.com"},"content":"<p>为了更好管理和灵活应用代码，我们应将 UI 和业务逻辑分离。除了这是官方推荐写法外，还有以下好处：</p>\n\n<p>The Container-Presentational pattern gives us many benefits:</p>\n\n<ol>\n  <li>Less code duplication. Because you are forced to move all the layout components out as separate presentational components, you can now directly reuse them instead of copy-pasting the code in every page.</li>\n  <li>Presentational components are essentially your app’s View layer. Hence, you can change the styling without touching the app’s logic.</li>\n  <li>Better separation of concerns. You understand your app and your UI better by writing components this way.</li>\n  <li>Better reusability. You can use the same presentational component with completely different state sources, and turn those into separate container components that can be further reused.</li>\n</ol>\n\n<p>在我们项目中，UI 放在 components 文件夹，业务逻辑放在 containers中。</p>\n\n<p>更多可参考：</p>\n\n<p><a href=\"https://www.reactnative.guide/9-redux/9.2-presentational-vs-containers.html\">Presentational Components vs Container Components</a></p>","excerpt":"为了更好管理和灵活应用代码，我们应将 UI 和业务逻辑分离。除了这是官方推荐写法外，还有以下好处：","languages":null,"categories":["note"],"tags":["react"]},{"title":"箭头函数 vs bind(this)","permalink":"https://sparanoid.com/arrow-functions-vs-bind-this.html","link":"https://sparanoid.com/arrow-functions-vs-bind-this.html","date":"2018-11-23T00:00:00-08:00","modified":"2019-01-17T19:58:38-08:00","author":{"name":"Jiajun Yan","url":"https://sparanoid.com/","email":"t@sparanoid.com"},"content":"<p>在定义函数时，可使用 exampleFunction = () =&gt; {…} 或者在 constructor 中将函数绑定 this。两者并没有过大的区别，但 Facebook 官方推荐使用 bind(this) 的写法，为了更好的效能。因而，在项目中统一使用 bind(this)。</p>\n\n<p>具体两者区别可参考：</p>\n\n<ol>\n  <li><a href=\"https://medium.freecodecamp.org/react-binding-patterns-5-approaches-for-handling-this-92c651b5af56\">React Binding Patterns: 5 Approaches for Handling this</a></li>\n  <li><a href=\"https://github.com/facebook/react/issues/9851\">Use arrow functions or bind manually in es6 classes? Any performance difference?</a></li>\n</ol>","excerpt":"在定义函数时，可使用 exampleFunction = () =&gt; {…} 或者在 constructor 中将函数绑定 this。两者并没有过大的区别，但 Facebook 官方推荐使用 bind(this) 的写法，为了更好的效能。因而，在项目中统一使用 bind(this)。","languages":null,"categories":["note"],"tags":["react"]},{"title":"React 生命周期函数","permalink":"https://sparanoid.com/react-lifecycle-hooks.html","link":"https://sparanoid.com/react-lifecycle-hooks.html","date":"2018-10-17T00:00:00-07:00","modified":"2019-01-17T19:58:38-08:00","author":{"name":"Jiajun Yan","url":"https://sparanoid.com/","email":"t@sparanoid.com"},"content":"<blockquote>\n  <p>理解 React 生命周期函数在项目开发很有必要。</p>\n</blockquote>\n\n<ol>\n  <li><code class=\"highlighter-rouge\">componentWillMount</code> -&gt; Immediately before the initial rendering</li>\n  <li><code class=\"highlighter-rouge\">componentDidMount</code> -&gt; Immediately after the initial rendering</li>\n  <li><code class=\"highlighter-rouge\">componentWillReceiveProps(nextProps)</code> -&gt; When component receives new props</li>\n  <li><code class=\"highlighter-rouge\">shouldComponentUpdate(nextProps, nextState)</code> -&gt; Before rendering, after receiving new props or state (return false to prevent rendering)</li>\n  <li><code class=\"highlighter-rouge\">componentWillUpdate(nextProps, nextState)</code> -&gt; Before rendering, after receiving new props or state</li>\n  <li><code class=\"highlighter-rouge\">componentDidUpdate(prevProps, prevState)</code> -&gt; After component’s updates are flushed to DOM</li>\n  <li><code class=\"highlighter-rouge\">componentWillUnmount</code> -&gt; Immediately before removing component from DOM</li>\n</ol>\n\n<p>其中，<code class=\"highlighter-rouge\">shouldComponentUpdate</code> 和 <code class=\"highlighter-rouge\">componentWillUpdate</code> 的区别在于，<code class=\"highlighter-rouge\">componentWillUpdate</code> 只有在 <code class=\"highlighter-rouge\">shouldComponentUpdate</code> 返回 <code class=\"highlighter-rouge\">true</code> 的时候才会执行。他们是上下关系。</p>\n\n<p>参考：<a href=\"https://stackoverflow.com/questions/45076564/what-is-the-difference-between-shouldcomponentupdate-and-componentwillupdate-in\">What is the difference between shouldComponentUpdate and componentWillUpdate in React?</a></p>\n\n<p>延伸阅读：<a href=\"http://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/\"><code class=\"highlighter-rouge\">React 生命周期函数图表</code></a></p>","excerpt":"理解 React 生命周期函数在项目开发很有必要。","languages":null,"categories":["note"],"tags":["react"]},{"title":"A Simple React Router v4 Tutorial","permalink":"https://sparanoid.com/a-simple-react-router-v4-tutorial.html","link":"https://sparanoid.com/a-simple-react-router-v4-tutorial.html","date":"2018-10-10T00:00:00-07:00","modified":"2019-01-19T01:02:09-08:00","author":{"name":"Jiajun Yan","url":"https://sparanoid.com/","email":"t@sparanoid.com"},"content":"<p>React Router 简明教程。</p>\n\n<p>参考链接：<a href=\"https://blog.pshrmn.com/entry/simple-react-router-v4-tutorial/\">A Simple React Router v4 Tutorial</a></p>\n\n<hr />\n\n<p>问题汇总：</p>\n\n<ol>\n  <li><code class=\"highlighter-rouge\">react-router4</code> 和 <code class=\"highlighter-rouge\">react-router-dom</code> 有什么关系</li>\n</ol>\n\n<p><code class=\"highlighter-rouge\">react-router4</code> 被拆分了三个部分，<code class=\"highlighter-rouge\">react-router-native</code> 是 native 端的路由，<code class=\"highlighter-rouge\">react-router-dom</code> 是 Web 的路由以及 <code class=\"highlighter-rouge\">router-core</code> 路由核心，日常开发使用 <code class=\"highlighter-rouge\">react-router-dom</code> 就好。</p>","excerpt":"React Router 简明教程。","languages":null,"categories":["note"],"tags":["react"]},{"title":"HTML5 和 CSS3 新特性","permalink":"https://sparanoid.com/html5-css3-features.html","link":"https://sparanoid.com/html5-css3-features.html","date":"2018-08-11T00:00:00-07:00","modified":"2019-01-17T07:25:39-08:00","author":{"name":"Jiajun Yan","url":"https://sparanoid.com/","email":"t@sparanoid.com"},"content":"<blockquote>\n  <p>HTML5 和 CSS3 的新特性经常在工作中用到，也会在笔试面试中提到。为避免遗忘，现整理总结一下。</p>\n</blockquote>\n\n<h1 id=\"html-5\">HTML 5</h1>\n\n<h2 id=\"1-离线储存\">1. 离线储存</h2>\n\n<p>相比 <code class=\"highlighter-rouge\">cookies</code>，HTML5 新增的 <a href=\"https://www.w3schools.com/html/html5_webstorage.asp\">localStorage 和 sessionStorage</a> 对本地离线储存有更大的空间和更方便的使用方式。且其不像 <code class=\"highlighter-rouge\">cookies</code> 般随 <code class=\"highlighter-rouge\">ajax</code> 请求传递。</p>\n\n<h2 id=\"2-canvas\">2. canvas</h2>\n\n<p><a href=\"https://www.w3schools.com/html/html5_canvas.asp\">canvas</a> 用于绘制网页图像。大量运用于网页游戏中。</p>\n\n<h2 id=\"3-新标签\">3. 新标签</h2>\n\n<p>新增了语义元素，例如 <code class=\"highlighter-rouge\">&lt;section&gt;</code>，<code class=\"highlighter-rouge\">&lt;article&gt;</code> 等。</p>\n\n<p>还有用于媒介回放的 <code class=\"highlighter-rouge\">&lt;audio&gt;</code> 和 <code class=\"highlighter-rouge\">&lt;video&gt;</code>。</p>\n\n<h2 id=\"4-新增-input-属性\">4. 新增 input 属性</h2>\n\n<p>例如 <code class=\"highlighter-rouge\">autocomplete</code>，<code class=\"highlighter-rouge\">autofocus</code> 等。</p>\n\n<hr />\n\n<h1 id=\"css3\">CSS3</h1>\n\n<h2 id=\"1-新增特效\">1. 新增特效</h2>\n\n<p>如圆角（<code class=\"highlighter-rouge\">border-radius</code>），阴影（<code class=\"highlighter-rouge\">box-shadow</code>），渐变（<code class=\"highlighter-rouge\">gradient</code>），旋转（<code class=\"highlighter-rouge\">transform</code>）和文字特效（<code class=\"highlighter-rouge\">text-shadow</code>）等。</p>\n\n<h2 id=\"2-媒体查询\">2. 媒体查询</h2>\n\n<p><a href=\"https://www.w3schools.com/css/css3_mediaqueries_ex.asp\">Media Queries</a></p>\n\n<h2 id=\"3-css-3-选择器\">3. CSS 3 选择器</h2>\n\n<p>如 <code class=\"highlighter-rouge\">body &gt; .mainTabContainer</code>。</p>\n\n<p>更多可参考：<a href=\"https://www.ibm.com/developerworks/cn/web/1202_zhouxiang_css3/index.html\">深入了解 CSS3 新特性</a></p>","excerpt":"HTML5 和 CSS3 的新特性经常在工作中用到，也会在笔试面试中提到。为避免遗忘，现整理总结一下。","languages":null,"categories":["note"],"tags":["js"]},{"title":"Promise 对象","permalink":"https://sparanoid.com/promise.html","link":"https://sparanoid.com/promise.html","date":"2018-07-24T00:00:00-07:00","modified":"2019-01-17T07:25:31-08:00","author":{"name":"Jiajun Yan","url":"https://sparanoid.com/","email":"t@sparanoid.com"},"content":"<blockquote>\n  <p>Promise 在笔试时经常被提及，却在工作中很少用到，但因为其重要性，还是需要复习整理一下。</p>\n</blockquote>\n\n<p><code class=\"highlighter-rouge\">Promise</code> 是异步编程的一种解决方案，简单来说就是一个容器，里面保存着某个未来才会结束的事件。</p>\n\n<ol>\n  <li>\n    <p>基本用法</p>\n\n    <div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// 创建 Promise</span>\n<span class=\"kd\">const</span> <span class=\"nx\">promise</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nb\">Promise</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">resolve</span><span class=\"p\">,</span> <span class=\"nx\">reject</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n<span class=\"c1\">// ... some code</span>\n\n<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"cm\">/* 异步操作成功 */</span><span class=\"p\">){</span>\n    <span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">);</span>\n<span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n    <span class=\"nx\">reject</span><span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n<span class=\"p\">});</span>\n\n<span class=\"c1\">// 使用链式 then 指定回调</span>\n<span class=\"nx\">promise</span><span class=\"p\">.</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n<span class=\"c1\">// success</span>\n<span class=\"p\">},</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n<span class=\"c1\">// failure</span>\n<span class=\"p\">});</span>\n</code></pre></div>    </div>\n\n    <p><code class=\"highlighter-rouge\">resolve</code> 表示成功回调；\n<code class=\"highlighter-rouge\">reject</code> 表示失败回调，可选提供。</p>\n  </li>\n  <li>\n    <p>链式 then() 操作</p>\n\n    <p>当需要使用多个 Promise 函数时，可用 <code class=\"highlighter-rouge\">then()</code> 进行连接：</p>\n\n    <div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">a</span> <span class=\"o\">=</span> <span class=\"nx\">data</span> <span class=\"o\">=&gt;</span> <span class=\"k\">new</span> <span class=\"nb\">Promise</span><span class=\"p\">((</span><span class=\"nx\">resolve</span><span class=\"p\">,</span> <span class=\"nx\">reject</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"p\">...</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">b</span> <span class=\"o\">=</span> <span class=\"nx\">data</span> <span class=\"o\">=&gt;</span> <span class=\"k\">new</span> <span class=\"nb\">Promise</span><span class=\"p\">((</span><span class=\"nx\">resolve</span><span class=\"p\">,</span> <span class=\"nx\">reject</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"p\">...</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">c</span> <span class=\"o\">=</span> <span class=\"nx\">data</span> <span class=\"o\">=&gt;</span> <span class=\"k\">new</span> <span class=\"nb\">Promise</span><span class=\"p\">((</span><span class=\"nx\">resolve</span><span class=\"p\">,</span> <span class=\"nx\">reject</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"p\">...</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">a</span><span class=\"p\">().</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"nx\">data</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">b</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">)).</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"nx\">data</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">c</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">));</span>\n</code></pre></div>    </div>\n  </li>\n  <li>\n    <p>catch()</p>\n\n    <p>用于指定发生错误时的回调函数。</p>\n\n    <p>一般来说，不要在 <code class=\"highlighter-rouge\">then</code> 方法里面定义 <code class=\"highlighter-rouge\">Reject</code> 状态的回调函数（即 <code class=\"highlighter-rouge\">then</code> 的第二个参数），总是使用 <code class=\"highlighter-rouge\">catch</code> 方法。</p>\n\n    <div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// bad</span>\n<span class=\"nx\">promise</span><span class=\"p\">.</span><span class=\"nx\">then</span><span class=\"p\">(</span>\n  <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// success</span>\n  <span class=\"p\">},</span>\n  <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// error</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">);</span>\n\n<span class=\"c1\">// good</span>\n<span class=\"nx\">promise</span>\n  <span class=\"p\">.</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// success</span>\n  <span class=\"p\">})</span>\n  <span class=\"p\">.</span><span class=\"k\">catch</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// error</span>\n  <span class=\"p\">});</span>\n</code></pre></div>    </div>\n  </li>\n  <li>\n    <p>finally()</p>\n\n    <p><code class=\"highlighter-rouge\">finally</code> 方法用于指定不管 <code class=\"highlighter-rouge\">Promise</code> 对象最后状态如何，都会执行的操作。该方法是 <code class=\"highlighter-rouge\">ES2018</code> 引入标准的。</p>\n\n    <div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">promise</span>\n<span class=\"p\">.</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"nx\">result</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span><span class=\"err\">···</span><span class=\"p\">})</span>\n<span class=\"p\">.</span><span class=\"k\">catch</span><span class=\"p\">(</span><span class=\"nx\">error</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span><span class=\"err\">···</span><span class=\"p\">})</span>\n<span class=\"p\">.</span><span class=\"k\">finally</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span><span class=\"err\">···</span><span class=\"p\">});</span>\n</code></pre></div>    </div>\n  </li>\n  <li>\n    <p>Promise.all()</p>\n\n    <p><code class=\"highlighter-rouge\">Promise.all</code> 方法用于将多个 <code class=\"highlighter-rouge\">Promise</code> 实例，包装成一个新的 <code class=\"highlighter-rouge\">Promise</code> 实例。</p>\n\n    <div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// 生成一个Promise对象的数组</span>\n<span class=\"kd\">const</span> <span class=\"nx\">promises</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">].</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">id</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"nx\">getJSON</span><span class=\"p\">(</span><span class=\"s1\">'/post/'</span> <span class=\"o\">+</span> <span class=\"nx\">id</span> <span class=\"o\">+</span> <span class=\"s1\">'.json'</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n\n<span class=\"nb\">Promise</span><span class=\"p\">.</span><span class=\"nx\">all</span><span class=\"p\">(</span><span class=\"nx\">promises</span><span class=\"p\">)</span>\n  <span class=\"p\">.</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">posts</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// ...</span>\n  <span class=\"p\">})</span>\n  <span class=\"p\">.</span><span class=\"k\">catch</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">reason</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// ...</span>\n  <span class=\"p\">});</span>\n</code></pre></div>    </div>\n\n    <p>上面代码中，<code class=\"highlighter-rouge\">promises</code> 是包含 6 个 <code class=\"highlighter-rouge\">Promise</code> 实例的数组，只有这 6 个实例的状态都变成 <code class=\"highlighter-rouge\">fulfilled</code>，或者其中有一个变为 <code class=\"highlighter-rouge\">rejected</code>，才会调用 <code class=\"highlighter-rouge\">Promise.all</code> 方法后面的回调函数。</p>\n  </li>\n</ol>","excerpt":"Promise 在笔试时经常被提及，却在工作中很少用到，但因为其重要性，还是需要复习整理一下。","languages":null,"categories":["note"],"tags":["js"]},{"title":"Upgrading Guide from v1 to v2","permalink":"https://sparanoid.com/upgrading-from-v1-to-v2.html","link":"https://sparanoid.com/upgrading-from-v1-to-v2.html","date":"2018-07-23T00:00:00-07:00","modified":"2019-01-14T08:18:04-08:00","author":{"name":"Jiajun Yan","url":"https://sparanoid.com/","email":"t@sparanoid.com"},"content":"<p>Almace Scaffolding now migrates from Less to Sass, this may make your existing projects non-upgradable, it need quite a lot of work for you to do the migration if you use a custom theme that it’s powered by Less preprocessor. You have to compare your existing projects to <a href=\"https://github.com/sparanoid/almace-scaffolding/pull/85\">this Pull Request</a> side to side to make sure every change you made are sync’ed correctly.</p>\n\n<p>If you’re a casual blogger only change some color variables for your default theme, Curtana in this situation, that’s good, you can migrate to v2 easier: just run <code class=\"highlighter-rouge\">$ grunt update</code>.</p>\n\n<p>You should also migrate your own styles in <code class=\"highlighter-rouge\">user.less</code> to <code class=\"highlighter-rouge\">_user.scss</code> and <code class=\"highlighter-rouge\">_varaibles.scss</code>. Due to Sass limitation, I don’t have variable hoisting feature like native CSS or Less at hand, so I have to create two user defined stylesheets:</p>\n\n<ul>\n  <li><code class=\"highlighter-rouge\">assets/_scss/_variables.scss</code> - This file should contain only Sass variables defined in theme Curtana. It will be loaded at the topmost of theme stylesheet <code class=\"highlighter-rouge\">app.scss</code>.</li>\n  <li><code class=\"highlighter-rouge\">assets/_scss/_user.scss</code> - where users create style customization.</li>\n</ul>\n\n<p>From 2.0.0, Almace Scaffolding still has the ability to use Less with Grunt.js, however it’s wise to write your theme in Sass for better future compatibility.</p>\n\n<p>If you’d like to stick with the Less version:</p>\n\n<ul>\n  <li>v1.1.11 will be the last version that supports Less.</li>\n  <li>Less version of theme Curtana will be avaiable as <code class=\"highlighter-rouge\">amsf/amsf-curtana-less</code>.</li>\n</ul>","excerpt":"Almace Scaffolding now migrates from Less to Sass, this may make your existing projects non-upgradable, it need quite a lot of work for you to do the migration if you use a custom theme that it’s powered by Less preprocessor. You have to compare your existing projects to this Pull Request side to side to make sure every change you made are sync’ed correctly.","languages":null,"categories":["news"],"tags":[]},{"title":"利用 Charles 进行手机端抓包","permalink":"https://sparanoid.com/charles-web-debugging-tool.html","link":"https://sparanoid.com/charles-web-debugging-tool.html","date":"2018-07-20T00:00:00-07:00","modified":"2019-01-16T07:17:38-08:00","author":{"name":"Jiajun Yan","url":"https://sparanoid.com/","email":"t@sparanoid.com"},"content":"<p>在开发小程序时，因为手机不像 PC 端可以直接通过浏览器进行 debug 排查，因而需要用到 Charles 进行 debug。</p>\n\n<p><a href=\"https://www.charlesproxy.com/\">Charles</a> 目前只有 Mac 客户端。安装后，确保手机和 Mac 都在同一无线网络，再进行如下设置：</p>\n\n<ol>\n  <li>\n    <p>查看 Mac 在网络的 IP 地址：</p>\n\n    <p>可通过 <code class=\"highlighter-rouge\">系统偏好</code>，选择 <code class=\"highlighter-rouge\">网络</code>，找到当前的 IP 地址。</p>\n\n    <p><img src=\"http://ww1.sinaimg.cn/large/007epDtPgy1fz8tdm839yj317c11i7gx.jpg\" alt=\"\" /></p>\n  </li>\n  <li>\n    <p>在手机中设置代理</p>\n\n    <p>以 iPhone 为例，在 <code class=\"highlighter-rouge\">设置</code> 里选择 <code class=\"highlighter-rouge\">Wi-Fi</code>，点击当前的网络最右边的 <code class=\"highlighter-rouge\">（i）</code>（如图）。</p>\n\n    <p>点击 <code class=\"highlighter-rouge\">设置代理</code>，并选择 <code class=\"highlighter-rouge\">手动</code>，将之前获得 IP 地址填到服务器，端口为 <code class=\"highlighter-rouge\">8888</code>。</p>\n\n    <p><img src=\"http://ww1.sinaimg.cn/large/007epDtPgy1fz8tuecczuj32zx1voqps.jpg\" alt=\"\" /></p>\n\n    <p>连接后，<code class=\"highlighter-rouge\">Charles</code> 会有如下提示，按 <code class=\"highlighter-rouge\">Allow</code>。</p>\n\n    <p><img src=\"http://ww1.sinaimg.cn/large/007epDtPgy1fz8tw7kqsjj31di0f6wk2.jpg\" alt=\"\" /></p>\n  </li>\n  <li>\n    <p>Debug</p>\n\n    <p>连接后界面如下。左边的 <code class=\"highlighter-rouge\">Structure</code> 部分是手机访问的每个网络地址。每个地址均可展开。</p>\n\n    <p><img src=\"http://ww1.sinaimg.cn/large/007epDtPgy1fz8tyb51usj31xu1boh76.jpg\" alt=\"\" /></p>\n\n    <p>展开某个地址，会看到发起的 <code class=\"highlighter-rouge\">API</code> 请求，以及其参数。</p>\n\n    <p>在右边的 <code class=\"highlighter-rouge\">Content</code> 栏里，可看到我们想要排查的 JSON 格式，根据自己的情况排查即可。至此，debug 教程完毕。</p>\n\n    <p><img src=\"http://ww1.sinaimg.cn/large/007epDtPgy1fz8u0jnshgj31xu1botq0.jpg\" alt=\"\" /></p>\n  </li>\n</ol>","excerpt":"在开发小程序时，因为手机不像 PC 端可以直接通过浏览器进行 debug 排查，因而需要用到 Charles 进行 debug。","languages":null,"categories":["note"],"tags":["work"]},{"title":"为项目分支添加标签","permalink":"https://sparanoid.com/git-tags.html","link":"https://sparanoid.com/git-tags.html","date":"2018-06-17T00:00:00-07:00","modified":"2019-01-16T04:46:29-08:00","author":{"name":"Jiajun Yan","url":"https://sparanoid.com/","email":"t@sparanoid.com"},"content":"<p>在工作之前，一直很好奇 GitHub 上的版本号到底是怎样创建的。</p>\n\n<p>在工作之后，发现原来添加标签（俗称 <code class=\"highlighter-rouge\">打 tag</code>）是非常容易和重要的。</p>\n\n<ol>\n  <li>\n    <p>添加标签</p>\n\n    <p>在命令行中指定 Git 项目目录，输入：</p>\n\n    <div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code> git tag version-name\n git push --tags\n</code></pre></div>    </div>\n\n    <p>即可创建版本号。</p>\n  </li>\n  <li>\n    <p>删除标签</p>\n\n    <p>依旧在命令行中指定 Git 项目目录，输入：</p>\n\n    <div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code> git tag -d version-name\n git push origin :refs/tags/version-name\n</code></pre></div>    </div>\n  </li>\n</ol>\n\n<p>注意：将上述的 <code class=\"highlighter-rouge\">version-name</code> 替换成自己的版本号即可。</p>","excerpt":"在工作之前，一直很好奇 GitHub 上的版本号到底是怎样创建的。","languages":null,"categories":["note"],"tags":["git"]},{"title":"call, apply, bind","permalink":"https://sparanoid.com/call-bind-apply.html","link":"https://sparanoid.com/call-bind-apply.html","date":"2018-04-23T00:00:00-07:00","modified":"2019-01-16T02:03:48-08:00","author":{"name":"Jiajun Yan","url":"https://sparanoid.com/","email":"t@sparanoid.com"},"content":"<p>call, apply, bind 在笔试时经常被提及到，主要用于指定 <code class=\"highlighter-rouge\">this</code> 的指向。</p>\n\n<h2 id=\"1-call\">1. call</h2>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">a</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">user</span><span class=\"p\">:</span> <span class=\"s1\">'Jiajun'</span><span class=\"p\">,</span>\n  <span class=\"na\">fn</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">,</span> <span class=\"nx\">ee</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">user</span><span class=\"p\">);</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">e</span> <span class=\"o\">+</span> <span class=\"nx\">ee</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n<span class=\"kd\">var</span> <span class=\"nx\">b</span> <span class=\"o\">=</span> <span class=\"nx\">a</span><span class=\"p\">.</span><span class=\"nx\">fn</span><span class=\"p\">;</span> <span class=\"c1\">// 目前这里的 fn 指向 window，因为 b 没有被执行</span>\n<span class=\"nx\">b</span><span class=\"p\">.</span><span class=\"nx\">call</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">);</span> <span class=\"c1\">// fn 中的 this === a</span>\n</code></pre></div></div>\n\n<h2 id=\"2-apply\">2. apply</h2>\n\n<p>性质和 call 一样，只是在调用 apply 时，需要传数组，而不是单个参数。</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">b</span><span class=\"p\">.</span><span class=\"nx\">apply</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]);</span>\n</code></pre></div></div>\n\n<p>注意，如果 <code class=\"highlighter-rouge\">b.call(null)</code> 或 <code class=\"highlighter-rouge\">b.apply(null)</code>，那么其指向 window。</p>\n\n<h2 id=\"3-bind\">3. bind</h2>\n\n<p>bind 方法返回的是修改过后的函数。</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">a</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"na\">user</span><span class=\"p\">:</span> <span class=\"s1\">'Jiajun'</span><span class=\"p\">,</span>\n    <span class=\"na\">fn</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">user</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">var</span> <span class=\"nx\">b</span> <span class=\"o\">=</span> <span class=\"nx\">a</span><span class=\"p\">.</span><span class=\"nx\">fn</span><span class=\"p\">;</span>\n<span class=\"kd\">var</span> <span class=\"nx\">c</span> <span class=\"o\">=</span> <span class=\"nx\">b</span><span class=\"p\">.</span><span class=\"nx\">bind</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">);</span> <span class=\"c1\">// 这里若不定义 c，则无输出</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">c</span><span class=\"p\">);</span> <span class=\"c1\">// 返回 fn</span>\n</code></pre></div></div>\n\n<p>注意： <code class=\"highlighter-rouge\">b.bind(a)</code> 是一个函数，而 <code class=\"highlighter-rouge\">b.bind(a)()</code> 会执行函数。</p>","excerpt":"call, apply, bind 在笔试时经常被提及到，主要用于指定 this 的指向。","languages":null,"categories":["note"],"tags":["js"]},{"title":"原型链与继承","permalink":"https://sparanoid.com/the-prototype-and-inheritance.html","link":"https://sparanoid.com/the-prototype-and-inheritance.html","date":"2018-04-02T00:00:00-07:00","modified":"2019-01-19T01:02:09-08:00","author":{"name":"Jiajun Yan","url":"https://sparanoid.com/","email":"t@sparanoid.com"},"content":"<blockquote>\n  <p>原型链与继承是 JS 的重要部分，经常在面试中提及。虽然工作中甚少接触，但为免忘记，再次总结一下。</p>\n</blockquote>\n\n<p>索引：</p>\n\n<ol>\n  <li>构造函数</li>\n  <li>引用类型</li>\n  <li>原型链继承例子</li>\n  <li>描述 new 一个对象的过程</li>\n</ol>\n\n<hr />\n\n<h1 id=\"1-构造函数\">1. 构造函数</h1>\n\n<blockquote>\n\n</blockquote>\n\n<p><code class=\"highlighter-rouge\">构造函数（constructor）</code> 的名字的首个字母默认为大写，用 <code class=\"highlighter-rouge\">new</code> 定义。</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">function</span> <span class=\"nx\">Foo</span><span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"p\">,</span> <span class=\"nx\">age</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">name</span> <span class=\"o\">=</span> <span class=\"nx\">name</span><span class=\"p\">;</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">age</span> <span class=\"o\">=</span> <span class=\"nx\">age</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">var</span> <span class=\"nx\">f</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Foo</span><span class=\"p\">(</span><span class=\"s1\">'zhangsan'</span><span class=\"p\">,</span> <span class=\"mi\">26</span><span class=\"p\">);</span>\n<span class=\"nx\">f</span><span class=\"p\">.</span><span class=\"nx\">name</span><span class=\"p\">;</span> <span class=\"c1\">// zhangsan</span>\n</code></pre></div></div>\n\n<p><strong>注意点：</strong></p>\n\n<p>如何判断一个函数是否一个变量的 <code class=\"highlighter-rouge\">constructor</code>？</p>\n\n<ol>\n  <li><code class=\"highlighter-rouge\">var a = {}</code> 等于 <code class=\"highlighter-rouge\">var a = new Object();</code></li>\n  <li><code class=\"highlighter-rouge\">var b = []</code> 等于 <code class=\"highlighter-rouge\">var b = new Array();</code></li>\n  <li><code class=\"highlighter-rouge\">function Foo()</code> 等于 <code class=\"highlighter-rouge\">var Foo = new Function();</code></li>\n</ol>\n\n<p>答案： <code class=\"highlighter-rouge\">variable</code> <strong><em>instanceof</em></strong> <code class=\"highlighter-rouge\">Array</code>。</p>\n\n<h1 id=\"2-引用类型\">2. 引用类型</h1>\n\n<h2 id=\"介绍\">介绍</h2>\n\n<p>引用类型包括：<code class=\"highlighter-rouge\">Object 类型</code>，<code class=\"highlighter-rouge\">Array 类型</code>，<code class=\"highlighter-rouge\">Function 类型</code> 等。</p>\n\n<p>所有引用类型都有对象属性，即：</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">a</span> <span class=\"o\">=</span> <span class=\"p\">{};</span>\n<span class=\"nx\">a</span><span class=\"p\">.</span><span class=\"nx\">age</span> <span class=\"o\">=</span> <span class=\"mi\">100</span><span class=\"p\">;</span>\n\n<span class=\"kd\">var</span> <span class=\"nx\">b</span> <span class=\"o\">=</span> <span class=\"p\">[];</span>\n<span class=\"nx\">b</span><span class=\"p\">.</span><span class=\"nx\">age</span> <span class=\"o\">=</span> <span class=\"mi\">100</span><span class=\"p\">;</span>\n\n<span class=\"kd\">var</span> <span class=\"nx\">c</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{};</span>\n<span class=\"nx\">c</span><span class=\"p\">.</span><span class=\"nx\">age</span> <span class=\"o\">=</span> <span class=\"mi\">100</span><span class=\"p\">;</span>\n</code></pre></div></div>\n\n<p>所有引用类型都有一个 <code class=\"highlighter-rouge\">__proto__</code> 属性。<br />\n所有函数都有一个 <code class=\"highlighter-rouge\">prototype</code> 属性。</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">obj</span> <span class=\"o\">=</span> <span class=\"p\">{};</span>\n<span class=\"nx\">obj</span><span class=\"p\">.</span><span class=\"nx\">__proto__</span><span class=\"p\">...</span>\n</code></pre></div></div>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">function</span> <span class=\"nx\">fn</span><span class=\"p\">()</span> <span class=\"p\">{}</span>\n<span class=\"nx\">fn</span><span class=\"p\">.</span><span class=\"nx\">prototype</span><span class=\"p\">...</span>\n</code></pre></div></div>\n\n<p>引用类型中的 <code class=\"highlighter-rouge\">__proto__</code> 属性指向它的构造函数的 <code class=\"highlighter-rouge\">prototype</code> 属性：</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">a</span> <span class=\"o\">=</span> <span class=\"p\">[];</span>\n<span class=\"nx\">a</span><span class=\"p\">.</span><span class=\"nx\">__proto__</span> <span class=\"o\">===</span> <span class=\"nb\">Array</span><span class=\"p\">.</span><span class=\"nx\">prototype</span><span class=\"p\">;</span> <span class=\"c1\">// true</span>\n</code></pre></div></div>\n\n<h2 id=\"原型链如何继承\">原型链如何继承</h2>\n\n<p>如果当获取一个对象的某个属性时，而此对象本身没有这个属性，则会去它的 <code class=\"highlighter-rouge\">__proto__</code> 中找。<br />\n<code class=\"highlighter-rouge\">__proto__</code> 中会含有 <code class=\"highlighter-rouge\">push</code>，<code class=\"highlighter-rouge\">pop</code>，<code class=\"highlighter-rouge\">concat</code> 这些属性。</p>\n\n<p>例子：</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">function</span> <span class=\"nx\">Foo</span><span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"p\">,</span> <span class=\"nx\">age</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">name</span> <span class=\"o\">=</span> <span class=\"nx\">name</span><span class=\"p\">;</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">age</span> <span class=\"o\">=</span> <span class=\"nx\">age</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// 1.</span>\n<span class=\"nx\">Foo</span><span class=\"p\">.</span><span class=\"nx\">prototype</span><span class=\"p\">.</span><span class=\"nx\">alertName</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"nx\">alert</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">name</span><span class=\"p\">);</span>\n<span class=\"p\">};</span>\n\n<span class=\"c1\">// 2.</span>\n<span class=\"kd\">var</span> <span class=\"nx\">f</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Foo</span><span class=\"p\">(</span><span class=\"s1\">'zhangsan'</span><span class=\"p\">,</span> <span class=\"mi\">26</span><span class=\"p\">);</span>\n\n<span class=\"nx\">f</span><span class=\"p\">.</span><span class=\"nx\">printName</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">name</span><span class=\"p\">);</span>\n<span class=\"p\">};</span>\n\n<span class=\"nx\">f</span><span class=\"p\">.</span><span class=\"nx\">alertName</span><span class=\"p\">();</span> <span class=\"c1\">// 'zhangsan'</span>\n<span class=\"nx\">f</span><span class=\"p\">.</span><span class=\"nx\">printName</span><span class=\"p\">();</span> <span class=\"c1\">// 'zhangsan'</span>\n</code></pre></div></div>\n\n<p>后一种方法是 <code class=\"highlighter-rouge\">f</code> 独有的。<br />\n而前一种方法是 <code class=\"highlighter-rouge\">f</code> 自身没有，但通过 <code class=\"highlighter-rouge\">__proto__</code> 往上查找。</p>\n\n<p>如何判断 <code class=\"highlighter-rouge\">f</code> 有几种属性：</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">var</span> <span class=\"nx\">item</span> <span class=\"k\">in</span> <span class=\"nx\">f</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">f</span><span class=\"p\">.</span><span class=\"nx\">hasOwnProperty</span><span class=\"p\">(</span><span class=\"nx\">item</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">item</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>上述代码片段打印出来的是：</p>\n\n<blockquote>\n  <p>name<br />\nage<br />\nprintName</p>\n</blockquote>\n\n<p>如果不加 <code class=\"highlighter-rouge\">hasOwnProperty</code> 判断，则为：</p>\n\n<blockquote>\n  <p>name<br />\nage<br />\nprintName<br />\nalertName</p>\n</blockquote>\n\n<p>当中 <code class=\"highlighter-rouge\">alertName</code> 是 <code class=\"highlighter-rouge\">Foo</code> 中创建，不属于 <code class=\"highlighter-rouge\">f</code> 自身。</p>\n\n<h2 id=\"图例\">图例</h2>\n\n<p><img src=\"http://ww1.sinaimg.cn/large/007epDtPgy1fzbyir2jxdj31bs0lsgoy.jpg\" alt=\"\" /></p>\n\n<p><code class=\"highlighter-rouge\">f</code> <strong><em>instanceof</em></strong> <code class=\"highlighter-rouge\">Foo</code>, <code class=\"highlighter-rouge\">f</code> <strong><em>instanceof</em></strong> <code class=\"highlighter-rouge\">Object</code><br />\n<strong><em>instanceof</em></strong> 通过 <code class=\"highlighter-rouge\">f</code> 的 <code class=\"highlighter-rouge\">__proto__</code> 一层一层往上找。</p>\n\n<h1 id=\"3-原型链继承例子\">3. 原型链继承例子</h1>\n\n<blockquote>\n\n</blockquote>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">function</span> <span class=\"nx\">Dog</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">barks</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">'dog barks'</span><span class=\"p\">);</span>\n  <span class=\"p\">};</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">Animal</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">eats</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">'animal eats'</span><span class=\"p\">);</span>\n  <span class=\"p\">};</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">Dog</span><span class=\"p\">.</span><span class=\"nx\">prototype</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Animal</span><span class=\"p\">();</span>\n<span class=\"kd\">var</span> <span class=\"nx\">dog</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Dog</span><span class=\"p\">();</span>\n<span class=\"nx\">dog</span><span class=\"p\">.</span><span class=\"nx\">barks</span><span class=\"p\">();</span> <span class=\"c1\">// dog barks</span>\n<span class=\"nx\">dog</span><span class=\"p\">.</span><span class=\"nx\">eats</span><span class=\"p\">();</span> <span class=\"c1\">// animal eats</span>\n</code></pre></div></div>\n\n<h1 id=\"4-描述-new-一个对象的过程\">4. 描述 new 一个对象的过程</h1>\n\n<blockquote>\n\n</blockquote>\n\n<ol>\n  <li>创建一个新对象</li>\n  <li><code class=\"highlighter-rouge\">this</code> 指向这个新对象</li>\n  <li>执行代码，即对 <code class=\"highlighter-rouge\">this</code> 赋值</li>\n  <li>返回 <code class=\"highlighter-rouge\">this</code></li>\n</ol>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">function</span> <span class=\"nx\">Foo</span><span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"p\">,</span> <span class=\"nx\">age</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">name</span> <span class=\"o\">=</span> <span class=\"nx\">name</span><span class=\"p\">;</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">age</span> <span class=\"o\">=</span> <span class=\"nx\">age</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">var</span> <span class=\"nx\">f</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Foo</span><span class=\"p\">(</span><span class=\"s1\">'Jiajun'</span><span class=\"p\">,</span> <span class=\"mi\">26</span><span class=\"p\">);</span>\n</code></pre></div></div>","excerpt":"原型链与继承是 JS 的重要部分，经常在面试中提及。虽然工作中甚少接触，但为免忘记，再次总结一下。","languages":null,"categories":["note"],"tags":["js"]},{"title":"MVC 和 MVVM 的区别","permalink":"https://sparanoid.com/mvc-vs-mvvm.html","link":"https://sparanoid.com/mvc-vs-mvvm.html","date":"2018-03-02T00:00:00-08:00","modified":"2019-01-17T19:58:38-08:00","author":{"name":"Jiajun Yan","url":"https://sparanoid.com/","email":"t@sparanoid.com"},"content":"<blockquote>\n  <p>MVC 和 MVVM 经常被谈到他们之间的区别。今天来整理总结一下。</p>\n</blockquote>\n\n<h1 id=\"mvc\">MVC</h1>\n\n<blockquote>\n\n</blockquote>\n\n<p>MVC 分为以下三个点：</p>\n\n<blockquote>\n  <p>Model 数据层<br />\nView 视图层<br />\nController 控制器（逻辑层）</p>\n</blockquote>\n\n<p>他们的通信是单向的：</p>\n\n<p><img src=\"http://ww1.sinaimg.cn/large/007epDtPgy1fzajlvaty1j310u0jgwg3.jpg\" alt=\"\" /></p>\n\n<p>一个简单的例子：</p>\n\n<p><code class=\"highlighter-rouge\">View</code> 按钮点击 -&gt; 传入 <code class=\"highlighter-rouge\">Controller</code> 后处理数据 -&gt; 数据处理完毕后，返回 <code class=\"highlighter-rouge\">View</code>。</p>\n\n<h1 id=\"mvvm\">MVVM</h1>\n\n<blockquote>\n\n</blockquote>\n\n<p>MVVM 是 MVC 的一个延伸。</p>\n\n<p>同样，MVVM 也分为三个点：</p>\n\n<blockquote>\n  <p>ViewModel 视图模型<br />\nView 视图层<br />\nController 控制器（逻辑层）</p>\n</blockquote>\n\n<p><code class=\"highlighter-rouge\">ViewModel</code> 可以理解为 <code class=\"highlighter-rouge\">Model</code> 和 <code class=\"highlighter-rouge\">View</code> 的桥梁。</p>\n\n<p>MVVM 采用双向绑定（data-binding），<code class=\"highlighter-rouge\">View</code> 通过事件绑定影响 <code class=\"highlighter-rouge\">Model</code>；<code class=\"highlighter-rouge\">Model</code> 通过数据绑定影响 <code class=\"highlighter-rouge\">View</code>。</p>\n\n<p><img src=\"http://ww1.sinaimg.cn/large/007epDtPgy1fzak08g8t5j310w0jg400.jpg\" alt=\"\" /></p>","excerpt":"MVC 和 MVVM 经常被谈到他们之间的区别。今天来整理总结一下。","languages":null,"categories":["note"],"tags":["js"]},{"title":"Vue 生命周期函数","permalink":"https://sparanoid.com/vue-lifecycle-hooks.html","link":"https://sparanoid.com/vue-lifecycle-hooks.html","date":"2018-02-09T00:00:00-08:00","modified":"2019-01-17T19:58:38-08:00","author":{"name":"Jiajun Yan","url":"https://sparanoid.com/","email":"t@sparanoid.com"},"content":"<blockquote>\n  <p>理解 Vue 生命周期函数在项目开发很有必要。</p>\n</blockquote>\n\n<p>简单来说，生命周期函数指的是项目在运行时的执行顺序。</p>\n\n<ol>\n  <li><strong><code class=\"highlighter-rouge\">beforeCreate()</code></strong><br />\n 在 <code class=\"highlighter-rouge\">data</code> 和 <code class=\"highlighter-rouge\">methods</code> 初始化前已被执行。</li>\n  <li><strong><code class=\"highlighter-rouge\">created()</code></strong><br />\n 在 <code class=\"highlighter-rouge\">data</code> 和 <code class=\"highlighter-rouge\">methods</code> 初始化后再执行。</li>\n  <li><strong><code class=\"highlighter-rouge\">beforeMount()</code></strong><br />\n <code class=\"highlighter-rouge\">DOM 模版</code> 编译在内存中，但未渲染到页面中。</li>\n  <li><strong><code class=\"highlighter-rouge\">mounted()</code></strong><br />\n <code class=\"highlighter-rouge\">模版</code>已渲染到页面中, <code class=\"highlighter-rouge\">new Vue</code> 已被完全创建好。</li>\n  <li><strong><code class=\"highlighter-rouge\">beforeUpdate()</code></strong>\n    <ul>\n      <li>指在 <code class=\"highlighter-rouge\">data</code> 改变时，执行的函数；</li>\n      <li>界面未更新，但数据已更新。</li>\n    </ul>\n  </li>\n  <li><strong><code class=\"highlighter-rouge\">updated()</code></strong><br />\n <code class=\"highlighter-rouge\">data</code> 和页面都完成更新同步。</li>\n  <li><strong><code class=\"highlighter-rouge\">beforeDestroy()</code></strong><br />\n 所有 <code class=\"highlighter-rouge\">data</code> 和 <code class=\"highlighter-rouge\">methods</code>，过滤器等都处于可用状态。</li>\n  <li><strong><code class=\"highlighter-rouge\">destroyed()</code></strong><br />\n 所有 <code class=\"highlighter-rouge\">data</code> 和 <code class=\"highlighter-rouge\">methods</code> 进行到不可用状态。</li>\n</ol>\n\n<hr />\n\n<p><img src=\"http://ww1.sinaimg.cn/large/007epDtPgy1fzakzvodtej30xc2cft9s.jpg\" alt=\"\" /></p>","excerpt":"理解 Vue 生命周期函数在项目开发很有必要。","languages":null,"categories":["note"],"tags":["vue"]},{"title":"作用域与闭包","permalink":"https://sparanoid.com/closure.html","link":"https://sparanoid.com/closure.html","date":"2018-01-16T00:00:00-08:00","modified":"2019-01-19T01:02:09-08:00","author":{"name":"Jiajun Yan","url":"https://sparanoid.com/","email":"t@sparanoid.com"},"content":"<p>说起闭包，会涉及到以下知识点：</p>\n\n<ol>\n  <li>执行上下文</li>\n  <li>this</li>\n  <li>作用域</li>\n  <li>作用域链</li>\n  <li>闭包</li>\n</ol>\n\n<h1 id=\"1-执行上下文\">1. 执行上下文</h1>\n<blockquote>\n\n</blockquote>\n\n<blockquote>\n  <p>范围：一段 <code class=\"highlighter-rouge\">&lt;script&gt;</code> 或者一个函数<br />\n全局：变量定义、函数声明<br />\n函数：变量定义、函数声明、this、arguments</p>\n</blockquote>\n\n<p>函数声明和函数表达式的区别：</p>\n\n<ol>\n  <li>\n    <p>函数声明</p>\n\n    <div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code> <span class=\"kd\">function</span> <span class=\"nx\">fn</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n     <span class=\"p\">...</span>\n <span class=\"p\">}</span>\n</code></pre></div>    </div>\n  </li>\n  <li>\n    <p>函数表达式</p>\n\n    <div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code> <span class=\"kd\">var</span> <span class=\"nx\">fn</span> <span class=\"o\">=</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n     <span class=\"p\">...</span>\n <span class=\"p\">}</span>\n</code></pre></div>    </div>\n  </li>\n</ol>\n\n<h1 id=\"2-this\">2. this</h1>\n<blockquote>\n\n</blockquote>\n\n<p><code class=\"highlighter-rouge\">this</code> 要在执行时才能确认，定义时无法确认</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">a</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s1\">'A'</span><span class=\"p\">,</span>\n  <span class=\"na\">fn</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">name</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n\n<span class=\"nx\">a</span><span class=\"p\">.</span><span class=\"nx\">fn</span><span class=\"p\">();</span> <span class=\"c1\">// this === a</span>\n<span class=\"nx\">a</span><span class=\"p\">.</span><span class=\"nx\">fn</span><span class=\"p\">.</span><span class=\"nx\">call</span><span class=\"p\">({</span> <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s1\">'B'</span> <span class=\"p\">});</span> <span class=\"c1\">// this === {name: 'B'}</span>\n<span class=\"kd\">var</span> <span class=\"nx\">fn1</span> <span class=\"o\">=</span> <span class=\"nx\">a</span><span class=\"p\">.</span><span class=\"nx\">fn</span><span class=\"p\">;</span>\n<span class=\"nx\">fn1</span><span class=\"p\">();</span> <span class=\"c1\">// this === window</span>\n</code></pre></div></div>\n\n<ol>\n  <li>\n    <p><code class=\"highlighter-rouge\">this</code> 作为构造函数执行</p>\n\n    <div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">function</span> <span class=\"nx\">Foo</span><span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">name</span> <span class=\"o\">=</span> <span class=\"nx\">name</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>    </div>\n\n    <p><code class=\"highlighter-rouge\">this</code> 指向 <code class=\"highlighter-rouge\">{}</code>，一个空对象 <code class=\"highlighter-rouge\">object</code>。</p>\n  </li>\n  <li>\n    <p><code class=\"highlighter-rouge\">this</code> 作为对象属性执行</p>\n\n    <div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">obj</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">age</span><span class=\"p\">:</span> <span class=\"mi\">26</span><span class=\"p\">,</span>\n  <span class=\"na\">fn</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">age</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre></div>    </div>\n\n    <p><code class=\"highlighter-rouge\">`this` === obj</code></p>\n  </li>\n  <li>\n    <p><code class=\"highlighter-rouge\">this</code> 作为普通函数执行</p>\n\n    <div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">function</span> <span class=\"nx\">fn</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>    </div>\n\n    <p><code class=\"highlighter-rouge\">`this` === window</code></p>\n  </li>\n  <li>\n    <p>call, bind, apply</p>\n\n    <p>call（最常用，用于改变 <code class=\"highlighter-rouge\">this</code> 的值）:</p>\n\n    <div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">function</span> <span class=\"nx\">fn</span><span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"p\">,</span> <span class=\"nx\">age</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n<span class=\"nx\">fn</span><span class=\"p\">.</span><span class=\"nx\">call</span><span class=\"p\">({</span> <span class=\"na\">x</span><span class=\"p\">:</span> <span class=\"mi\">100</span> <span class=\"p\">},</span> <span class=\"s1\">'zhangsan'</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">);</span>\n</code></pre></div>    </div>\n\n    <p><code class=\"highlighter-rouge\">`this` === {x: 100}</code></p>\n\n    <p>bind:</p>\n\n    <div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">fn</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"p\">,</span> <span class=\"nx\">age</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">);</span>\n<span class=\"p\">}.</span><span class=\"nx\">bind</span><span class=\"p\">({</span> <span class=\"na\">x</span><span class=\"p\">:</span> <span class=\"mi\">100</span> <span class=\"p\">});</span>\n<span class=\"nx\">fn</span><span class=\"p\">(</span><span class=\"s1\">'zhangsan'</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">);</span>\n</code></pre></div>    </div>\n\n    <p><code class=\"highlighter-rouge\">`this` === {x: 100}</code></p>\n\n    <p>call:</p>\n\n    <div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">function</span> <span class=\"nx\">fn</span><span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"p\">,</span> <span class=\"nx\">age</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n<span class=\"nx\">fn</span><span class=\"p\">.</span><span class=\"nx\">apply</span><span class=\"p\">({</span> <span class=\"na\">x</span><span class=\"p\">:</span> <span class=\"mi\">100</span> <span class=\"p\">},</span> <span class=\"p\">[</span><span class=\"s1\">'zhangsan'</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">]);</span>\n</code></pre></div>    </div>\n\n    <p><code class=\"highlighter-rouge\">`this` === {x: 100}</code></p>\n  </li>\n</ol>\n\n<h1 id=\"3-作用域\">3. 作用域</h1>\n<blockquote>\n\n</blockquote>\n\n<ol>\n  <li>\n    <p>JS 无块级作用域</p>\n\n    <div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n   <span class=\"kd\">var</span> <span class=\"nx\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'John'</span><span class=\"p\">;</span>\n <span class=\"p\">}</span>\n <span class=\"c1\">// 这里的 name 在 if() 内声明和在 if() 外中声明是一样的</span>\n</code></pre></div>    </div>\n  </li>\n  <li>\n    <p>自由变量</p>\n\n    <div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code> <span class=\"kd\">var</span> <span class=\"nx\">a</span> <span class=\"o\">=</span> <span class=\"mi\">100</span><span class=\"p\">;</span>\n <span class=\"kd\">function</span> <span class=\"nx\">fn</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n   <span class=\"kd\">var</span> <span class=\"nx\">b</span> <span class=\"o\">=</span> <span class=\"mi\">200</span><span class=\"p\">;</span>\n\n   <span class=\"c1\">// 当前作用域没有定义的变量，叫做自由变量</span>\n   <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">);</span>\n   <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">b</span><span class=\"p\">);</span> <span class=\"c1\">// 自由变量</span>\n <span class=\"p\">}</span>\n\n <span class=\"nx\">fn</span><span class=\"p\">();</span> <span class=\"c1\">// 100 200</span>\n</code></pre></div>    </div>\n  </li>\n</ol>\n\n<h1 id=\"4-作用域链\">4. 作用域链</h1>\n<blockquote>\n\n</blockquote>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">a</span> <span class=\"o\">=</span> <span class=\"mi\">100</span><span class=\"p\">;</span>\n<span class=\"kd\">function</span> <span class=\"nx\">F1</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">b</span> <span class=\"o\">=</span> <span class=\"mi\">200</span><span class=\"p\">;</span>\n  <span class=\"kd\">function</span> <span class=\"nx\">F2</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">c</span> <span class=\"o\">=</span> <span class=\"mi\">300</span><span class=\"p\">;</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">);</span> <span class=\"c1\">// 自由变量</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">b</span><span class=\"p\">);</span> <span class=\"c1\">// 自由变量</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">c</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n  <span class=\"nx\">F2</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">F1</span><span class=\"p\">();</span> <span class=\"c1\">// 100 200 300</span>\n<span class=\"c1\">// 通过不断在父级作用域寻找，这层级搜寻就叫做作用域链</span>\n</code></pre></div></div>\n\n<h1 id=\"5-闭包\">5. 闭包</h1>\n<blockquote>\n\n</blockquote>\n\n<p>闭包的应用场景如下：</p>\n\n<ol>\n  <li>\n    <p>函数作为返回值</p>\n\n    <div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code> <span class=\"kd\">function</span> <span class=\"nx\">F1</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n   <span class=\"kd\">var</span> <span class=\"nx\">a</span> <span class=\"o\">=</span> <span class=\"mi\">100</span><span class=\"p\">;</span>\n\n   <span class=\"c1\">// 返回一个函数</span>\n   <span class=\"k\">return</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n     <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">);</span> <span class=\"c1\">// a 是自由变量，因而从父级作用域找。此时 a = 100</span>\n   <span class=\"p\">};</span>\n <span class=\"p\">}</span>\n\n <span class=\"kd\">var</span> <span class=\"nx\">f1</span> <span class=\"o\">=</span> <span class=\"nx\">F1</span><span class=\"p\">();</span>\n <span class=\"kd\">var</span> <span class=\"nx\">a</span> <span class=\"o\">=</span> <span class=\"mi\">200</span><span class=\"p\">;</span> <span class=\"c1\">// 这里的 a 在全局作用域，与 F1() 中的 a 没有任何关系</span>\n <span class=\"nx\">f1</span><span class=\"p\">();</span> <span class=\"c1\">// 100</span>\n</code></pre></div>    </div>\n  </li>\n  <li>\n    <p>函数作为参数传递</p>\n\n    <div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code> <span class=\"kd\">function</span> <span class=\"nx\">F1</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n   <span class=\"kd\">var</span> <span class=\"nx\">a</span> <span class=\"o\">=</span> <span class=\"mi\">100</span><span class=\"p\">;</span>\n\n   <span class=\"c1\">// 返回一个函数</span>\n   <span class=\"k\">return</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n     <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">);</span> <span class=\"c1\">// a 是自由变量，因而从父级作用域找。此时 a = 100</span>\n   <span class=\"p\">};</span>\n <span class=\"p\">}</span>\n <span class=\"kd\">var</span> <span class=\"nx\">f1</span> <span class=\"o\">=</span> <span class=\"nx\">F1</span><span class=\"p\">();</span>\n\n <span class=\"kd\">function</span> <span class=\"nx\">F2</span><span class=\"p\">(</span><span class=\"nx\">fn</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n   <span class=\"kd\">var</span> <span class=\"nx\">a</span> <span class=\"o\">=</span> <span class=\"mi\">200</span><span class=\"p\">;</span>\n   <span class=\"nx\">fn</span><span class=\"p\">();</span>\n <span class=\"p\">}</span>\n <span class=\"nx\">F2</span><span class=\"p\">(</span><span class=\"nx\">f1</span><span class=\"p\">);</span> <span class=\"c1\">// 仍是 100</span>\n</code></pre></div>    </div>\n  </li>\n</ol>\n\n<h1 id=\"6-总结\">6. 总结</h1>\n<blockquote>\n\n</blockquote>\n\n<p>这里引申出两个问题：</p>\n\n<blockquote>\n  <p>如何理解作用域？<br />\n闭包的好处？</p>\n</blockquote>\n\n<ol>\n  <li>\n    <p>如何理解作用域？</p>\n\n    <ul>\n      <li>自由变量</li>\n      <li>作用域链，自由变量从父级作用域中查找</li>\n      <li>闭包的两个场景（返回一个函数，以及函数作为参数传递）</li>\n    </ul>\n  </li>\n  <li>\n    <p>闭包的好处？</p>\n    <ul>\n      <li>函数内的变量不受外部变量影响</li>\n      <li>不怕别人修改时顺带修改同一个名称变量的内容</li>\n      <li>有独立性</li>\n    </ul>\n  </li>\n</ol>","excerpt":"说起闭包，会涉及到以下知识点：","languages":null,"categories":["note"],"tags":["js"]},{"title":"Upgrading Guide: v1.1.0","permalink":"https://sparanoid.com/upgrading-guide-v1.1.0.html","link":"https://sparanoid.com/upgrading-guide-v1.1.0.html","date":"2017-01-07T00:00:00-08:00","modified":"2019-01-14T08:18:04-08:00","author":{"name":"Jiajun Yan","url":"https://sparanoid.com/","email":"t@sparanoid.com"},"content":"<p>There’re some significant changes in update v1.1.0, action required after you upgrade Almace Scaffolding.</p>\n\n<p>In your front-matter fields:</p>\n\n<ul>\n  <li>Replace all <code class=\"highlighter-rouge\">svg-headline</code>, <code class=\"highlighter-rouge\">img-headline</code> with <code class=\"highlighter-rouge\">heading-img</code>.</li>\n  <li>Replace all <code class=\"highlighter-rouge\">svg-headline-width</code>, <code class=\"highlighter-rouge\">img-headline-width</code> with <code class=\"highlighter-rouge\">heading-img-width</code>.</li>\n  <li>Remove all <code class=\"highlighter-rouge\">svg-headline-height</code>, <code class=\"highlighter-rouge\">img-headline-height</code> as they’re deprecated and no longer available.</li>\n  <li>Add <code class=\"highlighter-rouge\">heading-img-local: true</code> if images are stored right inside your project.</li>\n</ul>\n\n<p>Check the following front-matter data for post thumbnails:</p>\n\n<ul>\n  <li>Replace all <code class=\"highlighter-rouge\">thumb</code> with <code class=\"highlighter-rouge\">thumbnail</code>.</li>\n  <li>Add <code class=\"highlighter-rouge\">thumb/</code> prefix to your filename, ie. <code class=\"highlighter-rouge\">thumbnail: thumb/my-post.png</code>.</li>\n  <li>Add <code class=\"highlighter-rouge\">thumbnail-local: true</code> if thumbnails are stored right inside your project.</li>\n</ul>","excerpt":"There’re some significant changes in update v1.1.0, action required after you upgrade Almace Scaffolding.","languages":null,"categories":["news"],"tags":[]},{"title":"Jekyll Theme Compatibility","permalink":"https://sparanoid.com/jekyll-theme-compatibility.html","link":"https://sparanoid.com/jekyll-theme-compatibility.html","date":"2016-11-07T00:00:00-08:00","modified":"2019-01-14T08:18:04-08:00","author":{"name":"Jiajun Yan","url":"https://sparanoid.com/","email":"t@sparanoid.com"},"content":"<p>With recent release of Jekyll, it gets the built-in ability to support <a href=\"https://jekyllrb.com/docs/themes/\">themes</a>, since we’ve already added theme support in 2015, the original config variables <code class=\"highlighter-rouge\">theme</code> would be conflicted with the built-in one.</p>\n\n<p>To solve this issue, I’ve rename our <code class=\"highlighter-rouge\">theme</code> option to <code class=\"highlighter-rouge\">amsf_theme</code>. And here’s what you need to do to resovle compatibility issues after upgrading to latest Almace Scaffolding:</p>\n\n<ul>\n  <li>Rename your original <code class=\"highlighter-rouge\">theme</code> option in <code class=\"highlighter-rouge\">_amsf.yml</code> to <code class=\"highlighter-rouge\">amsf_theme</code>.</li>\n  <li>Add <code class=\"highlighter-rouge\">amsf_theme_url</code> with your theme Git URL.</li>\n  <li>Replace all <code class=\"highlighter-rouge\">site.theme</code> with <code class=\"highlighter-rouge\">site.amsf_theme</code> in your page templates.</li>\n</ul>","excerpt":"With recent release of Jekyll, it gets the built-in ability to support themes, since we’ve already added theme support in 2015, the original config variables theme would be conflicted with the built-in one.","languages":null,"categories":["news"],"tags":[]},{"title":"Multiple Themes Support","permalink":"https://sparanoid.com/multiple-themes-support.html","link":"https://sparanoid.com/multiple-themes-support.html","date":"2015-08-18T00:00:00-07:00","modified":"2019-01-14T08:18:04-08:00","author":{"name":"Jiajun Yan","url":"https://sparanoid.com/","email":"t@sparanoid.com"},"content":"<p>From version 0.0.31, you can now use multiple themes in Almace Scaffolding. See <a href=\"/themes.html\">Themes</a> for more information.</p>","excerpt":"From version 0.0.31, you can now use multiple themes in Almace Scaffolding. See Themes for more information.","languages":null,"categories":["news"],"tags":[]}]